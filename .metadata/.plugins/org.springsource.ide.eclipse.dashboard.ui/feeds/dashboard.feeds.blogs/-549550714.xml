<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2019-04-19T19:19:11Z</updated>
  <entry>
    <title>Preview releases of Spring Cloud Alibaba are available: 0.9.0, 0.2.2, and 0.1.2</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/19/preview-releases-of-spring-cloud-alibaba-are-available-0-9-0-0-2-2-and-0-1-2" />
    <category term="releases" label="Releases" />
    <author>
      <name>Spencer Gibb</name>
    </author>
    <id>tag:spring.io,2019-04-19:3654</id>
    <updated>2019-04-19T19:19:11Z</updated>
    <content type="html">&lt;p&gt;&lt;strong&gt;NOTE: This is a guest post from our friends at Alibaba.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hi! Today, we¡¯re very excited to announce that the 0.9.0, 0.2.2, and 0.1.2 releases of Spring Cloud Alibaba are now available.&lt;/p&gt;&lt;h2&gt;&lt;a href="#release-highlight" class="anchor" name="release-highlight"&gt;&lt;/a&gt;Release Highlight&lt;/h2&gt;
&lt;p&gt;Included in this GA are 3 new releases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Release 0.9.0: Compatible with Spring Cloud Greenwich&lt;/li&gt;
  &lt;li&gt;Release 0.2.2: Compatible with Spring Cloud Finchley&lt;/li&gt;
  &lt;li&gt;Release 0.1.2: Compatible with Spring Cloud Edgware&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Four new modules were added to all three releases: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;spring-cloud-alibaba-sentinel-zuul&lt;/li&gt;
  &lt;li&gt;spring-cloud-alibaba-seata&lt;/li&gt;
  &lt;li&gt;spring-cloud-alibaba-dubbo (not available in Release 0.1.2)&lt;/li&gt;
  &lt;li&gt;spring-cloud-alibaba-sms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, we introduced new features in spring-cloud-alibaba-nacos and spring-cloud-alibaba-sentinel, and rocketmq-binder is now integrated with rocketmq-spring. &lt;/p&gt;
&lt;p&gt;Lastly, we fixed some bugs found in the previous version.&lt;/p&gt;
&lt;p&gt;Note: The Spring Cloud Alibaba project is a community project maintained by Alibaba.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-alibaba-seata" class="anchor" name="spring-cloud-alibaba-seata"&gt;&lt;/a&gt;Spring Cloud Alibaba Seata&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/seata/seata"&gt;Seata&lt;/a&gt; is a distributed transaction component that is jointly open-sourced by Alibaba Group and Ant Financial. Being able to integrate with most of today&amp;rsquo;s relational databases that support ACID transactions, Seata addresses distributed transaction issues in microservice scenarios in an efficient and nonintrusive manner.&lt;/p&gt;
&lt;p&gt;At the level of Spring Cloud, Seata accesses the Spring Cloud layer by passing the transaction context in microservices:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for automatic restoration of Seata transaction contexts in a Spring MVC environment&lt;/li&gt;
  &lt;li&gt;Support for automatic passing of Seata transaction contexts when the service caller calls a service through RestTemplate or FeignClient&lt;/li&gt;
  &lt;li&gt;Support for using FeingClient together with Hystrix or Sentinel in rate limiting and service-degradation scenarios&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-alibaba-dubbo" class="anchor" name="spring-cloud-alibaba-dubbo"&gt;&lt;/a&gt;Spring Cloud Alibaba Dubbo&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://dubbo.apache.org/en-us/index.html"&gt;Apache Dubbo? (incubating)&lt;/a&gt; is a high-performance, Java-based open-source RPC framework.&lt;/p&gt;
&lt;p&gt;Spring Cloud Alibaba integrated with it: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Based on Dubbo Spring Boot 2.7.1 (minimum JDK requirement: Java 8)&lt;/li&gt;
  &lt;li&gt;Supports all Spring Cloud registry implementations for Dubbo service registration (including Alibaba Nacos) and introduces a new Dubbo registry protocol: &amp;quot;**spring-&lt;a href="cloud://localhost**"&gt;cloud://localhost**&lt;/a&gt;&amp;quot;&lt;/li&gt;
  &lt;li&gt;Extends the communication protocols of Spring Cloud service-to-service calls, meaning that REST is no longer the only way and more communication protocols that Dubbo supports can be chosen, providing better performance &amp;ndash; e.g. dubbo, thrift, and so on. There are three programming models for the developers:&lt;/li&gt;
  &lt;li&gt;Standard Apache Dubbo: &lt;code&gt;@Reference&lt;/code&gt; &lt;code&gt;@Service&lt;/code&gt; annotated on Java interface&lt;/li&gt;
  &lt;li&gt;Spring Cloud Open Feign: &lt;code&gt;@DubboTransported&lt;/code&gt; annotated on &lt;code&gt;@FeignClient&lt;/code&gt; Java interface&lt;/li&gt;
  &lt;li&gt;Spring Cloud RestTemplate: &lt;code&gt;@DubboTransported&lt;/code&gt; annotated on &lt;code&gt;@Bean&lt;/code&gt; definition of RestTemplate annonated &lt;code&gt;@LoadBalanced&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Substitutes for Netflix Ribbon by using Dubbo built-in Load balancer that offers a weighting mechanism making things more smooth and stable.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-alibaba-nacos" class="anchor" name="spring-cloud-alibaba-nacos"&gt;&lt;/a&gt;Spring Cloud Alibaba Nacos&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/alibaba/nacos"&gt;Nacos&lt;/a&gt; is a dynamic service discovery, configuration management, and service management platform that makes it easier to build cloud-native applications.&lt;/p&gt;&lt;h4&gt;&lt;a href="#spring-cloud-alibaba-nacos-config" class="anchor" name="spring-cloud-alibaba-nacos-config"&gt;&lt;/a&gt;Spring Cloud Alibaba Nacos Config&lt;/h4&gt;
&lt;p&gt;We updated Nacos Config as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade Nacos Client version to 1.0.0&lt;/li&gt;
  &lt;li&gt;Support &lt;code&gt;spring.cloud.nacos.config.enabled&lt;/code&gt; configuration to turn off Nacos Config auto-injection&lt;/li&gt;
  &lt;li&gt;Replace &lt;code&gt;spring.cloud.nacos.config.enabled&lt;/code&gt; with &lt;code&gt;spring.profiles.active&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;&lt;a href="#spring-cloud-alibaba-nacos-discovery" class="anchor" name="spring-cloud-alibaba-nacos-discovery"&gt;&lt;/a&gt;Spring Cloud Alibaba Nacos Discovery&lt;/h4&gt;
&lt;p&gt;We updated Nacos service registration as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade Nacos Client version to 1.0.0.&lt;/li&gt;
  &lt;li&gt;Support namespace to isolate the data.&lt;/li&gt;
  &lt;li&gt;Provide &lt;code&gt;NacosWatch&lt;/code&gt; to trigger &lt;code&gt;HeartbeatEvent&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Make &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt; optional to register service.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-alibaba-sentinel" class="anchor" name="spring-cloud-alibaba-sentinel"&gt;&lt;/a&gt;Spring Cloud Alibaba Sentinel&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/alibaba/Sentinel"&gt;Sentinel&lt;/a&gt; is an open-source project developed by the Alibaba Middleware team to address flow-control issues and ensure high availability in distributed architectures. Sentinel takes &amp;ldquo;flow&amp;rdquo; as the breakthrough point, and helps you to ensure service reliability through flow control, circuit breaking, and system load protection.&lt;/p&gt;
&lt;p&gt;Updates in this release include:&lt;br/&gt;- Upgrade the Sentinel version to 1.5.2&lt;br/&gt;- Add the &lt;code&gt;ruleType&lt;/code&gt; property for sentinel dataSource to fix the bug that the rule data won&amp;rsquo;t load dynamically when dataSource loads empty data for the first time&lt;br/&gt;- Fix the bug that &lt;code&gt;@SentinelRestTemplate&lt;/code&gt; doesn&amp;rsquo;t work in some scenarios&lt;br/&gt;- Add JSR 303 validation in &lt;code&gt;SentinelProperties&lt;/code&gt; and add two configuration items: Client IP and whether &lt;code&gt;CommonFilter&lt;/code&gt; is initialized&lt;br/&gt;- Support automatic injection of &lt;code&gt;RequestOriginParser&lt;/code&gt;&lt;br/&gt;- The priority of &lt;code&gt;SentinelProtectInterceptor&lt;/code&gt; that corresponds to &lt;code&gt;@SentinelRestTemplate&lt;/code&gt; becomes the highest&lt;br/&gt;- &lt;code&gt;SentinelEndpoint&lt;/code&gt; now displays more information, such as application name, log directory, log name policy, dashboard address, metrics file size, client IP, etc&lt;br/&gt;- Support &lt;code&gt;@EnableCircuitBreaker&lt;/code&gt;&lt;br/&gt;- Optimize flow control and circuit breaking handling logic in &lt;code&gt;RestTemplate&lt;/code&gt; and &lt;code&gt;Feign&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-alibaba-rocketmq-binder" class="anchor" name="spring-cloud-alibaba-rocketmq-binder"&gt;&lt;/a&gt;Spring Cloud Alibaba RocketMQ Binder&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/apache/rocketmq"&gt;RocketMQ&lt;/a&gt; is an open-source distributed messaging system based on highly available cluster technologies. It provides low-latency and highly available message publication and subscription services.&lt;/p&gt;
&lt;p&gt;Updates in this release include:&lt;br/&gt;- Integrate with RocketMQ Spring and refactoring&lt;br/&gt;- Support connection with Aliware MQ by configuring Alibaba Cloud AK/SK only&lt;br/&gt;- Optimized processing logic in the cases of message sending and consuming errors&lt;br/&gt;- Support sending messages asynchronously, and, by default, send messages asynchronously&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-alibaba-sentinel-zuul" class="anchor" name="spring-cloud-alibaba-sentinel-zuul"&gt;&lt;/a&gt;Spring Cloud Alibaba Sentinel Zuul&lt;/h3&gt;
&lt;p&gt;Zuul is a network gateway product of Netflix. We have now integrated it into Sentinel.&lt;/p&gt;
&lt;p&gt;Updates in this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sentinel is now integrated with Zuul and provides &lt;code&gt;SentinelPreFilter&lt;/code&gt;¡¢&lt;code&gt;SentinelPostFilter&lt;/code&gt;¡¢&lt;code&gt;SentinelErrorFilter&lt;/code&gt; for request interception&lt;/li&gt;
  &lt;li&gt;Provide the configuration prefix of &lt;code&gt;spring.cloud.sentinel.zuul.&lt;/code&gt; to configure Sentinel Filter&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-alibaba-cloud-sms" class="anchor" name="spring-cloud-alibaba-cloud-sms"&gt;&lt;/a&gt;Spring Cloud Alibaba Cloud SMS&lt;/h3&gt;
&lt;p&gt;SMS is a messaging service provided by Alibaba Cloud. &lt;/p&gt;
&lt;p&gt;Spring Cloud Alibaba Cloud SMS provides the following functions:&lt;br/&gt;- Support single and batch SMS delivery&lt;br/&gt;- Support SMS queries based on mobile phone number, date, and message type&lt;br/&gt;- Support queries of SMS delivery status by subscribing to the downlink messages&lt;br/&gt;- Support content retrieval of end user replies by subscribing to the uplink messages&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-alibaba-cloud-schedulerx" class="anchor" name="spring-cloud-alibaba-cloud-schedulerx"&gt;&lt;/a&gt;Spring Cloud Alibaba Cloud SchedulerX&lt;/h3&gt;
&lt;p&gt;SchedulerX is a job scheduling middleware tool provided by Alibaba Cloud.&lt;/p&gt;
&lt;p&gt;In this release we, fixed the circular reference bug.&lt;/p&gt;&lt;h2&gt;&lt;a href="#how-to-use" class="anchor" name="how-to-use"&gt;&lt;/a&gt;How to Use&lt;/h2&gt;
&lt;p&gt;These artifacts are available from Maven Central and Spring Release repository by using the BOM, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;0.9.0.RELEASE&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#what-rsquo-s-next" class="anchor" name="what-rsquo-s-next"&gt;&lt;/a&gt;What&amp;rsquo;s next&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Sentinel&lt;/strong&gt; currently supports reactive and will adapt to WebFlux and Spring Cloud Gateway.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RocketMQ Binder&lt;/strong&gt; adaptation to MessageSource for message pulling.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Pivotal Field CTO and OG Cloud Native Matt Stine on Architecture</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/19/a-bootiful-podcast-pivotal-field-cto-and-og-cloud-native-matt-stine-on-architecture" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-04-18:3653</id>
    <updated>2019-04-19T01:01:00Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of a Bootiful Podcast. In this episode, recorded in lovely Johannesburg, South Africa for the SpringOne Tour event, I&amp;rsquo;m joined by my buddy and one of the original cloud natives, Matt Stine!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/mstine"&gt;Matt&amp;rsquo;s Twitter (@mstine)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/607633950%3Fsecret_token%3Ds-89CQm&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow 2.1.0.M1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/18/spring-cloud-data-flow-2-1-0-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Janne Valkealahti</name>
    </author>
    <id>tag:spring.io,2019-04-18:3651</id>
    <updated>2019-04-18T11:38:45Z</updated>
    <content type="html">&lt;p&gt;The Spring Cloud Data Flow team is pleased to announce the release of a 2.1.0 M1 milestone-release. Follow the Getting Started guides for running on &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.1.0.M1/reference/htmlsingle/#getting-started-local"&gt;Local&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.1.0.M1/reference/htmlsingle/#getting-started-cloudfoundry"&gt;Cloud Foundry&lt;/a&gt;, and &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.1.0.M1/reference/htmlsingle/#getting-started-kubernetes"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What¡¯s new?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SCDF Helm Chart and Apache Kafka&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With continued interest from the community, as of v2.0.2, we have now added support to toggle between RabbitMQ and Apache Kafka when using SCDF¡¯s helm chart. Though the chart is in the PR status in Helm repository, &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.1.0.M1/reference/htmlsingle/#_installing_the_spring_cloud_data_flow_server_and_required_services"&gt;you could still try it&lt;/a&gt; out and give us feedback. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Compose and Apache Kafka&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To continue with the same trend in regards to Apache Kafka, along with regular Apache Kafka binder properties, we have now also added support for Kafka Streams binder properties; likewise, we have switched to use the official Confluent¡¯s Docker image as part of the Docker Compose &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.1.0.M1/reference/htmlsingle/#getting-started-local-deploying-spring-cloud-dataflow-docker-download"&gt;getting-started experience&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concurrent Launch Throttling for Tasks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With the recent feedback from the community concerning the concurrent task launching algorithm, we have redesigned the approach to decide whether or not Tasks are currently running, and if running, how many are concurrently in running state. A more realistic view of what¡¯s actually happening with Tasks is now possible by querying against the runtime status of the Tasks in the underlying platforms (e.g., Local, Cloud Foundry and Kubernetes). You can read all about the new design and the corner cases from the &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.1.0.M1/reference/htmlsingle/#spring-cloud-dataflow-task-limit-concurrent-executions"&gt;reference guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deployer Properties as Dropdown&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A growing number of support cases indicated that it is hard for the developers to discover and then supply the platform-specific deployer properties when deploying streams and tasks. We are fixing that by adding a new dropdown with deployer properties automatically populated based on the platform where SCDF is configured to run. The same also will apply for scenarios when there are 1 or more platforms configured to the single instance of SCDF - dropdown would react to the platform selection. Having this would not only simplify the discovery of how to derive these properties and its purpose but it also automatically creates the necessary prefixes in required by SCDF, so you don¡¯t have to worry about it when deploying streams/tasks. We are rolling it out for Streams in this release and the next milestone will include support for Tasks as well.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/50398/56348316-137ab480-61be-11e9-9f92-6607b7ec6fc6.png" alt="scdf-local-deployment-properties-1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring Cloud Data Flow Microsite&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The SCDF team takes pride is openly communicating with the community in various forums including StackOverflow, Gitter, GitHub, Twitter, and at times in Email and Zoom calls even.&lt;/p&gt;
&lt;p&gt;In the years of experience working in this model, we have come to learn that providing samples and documenting all the features in the form of a reference-guide alone is not sufficient. While engaging with the community, we tend to write even more workable code-samples and clarify concepts with extra examples. It has happened so much so that we tend to repeat answering for the same questions frequently, too. &lt;/p&gt;
&lt;p&gt;Adding to this, in the recent &lt;a href="https://gitter.im/spring-cloud/spring-cloud-stream?at=5c3d1b8020b78635b624166c"&gt;Spring Cloud Stream&lt;/a&gt;, &lt;a href="https://gitter.im/spring-cloud/spring-cloud-task?at=5c3deffdf780a1521f1451f1"&gt;Spring Cloud Task&lt;/a&gt;, and &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow?at=5c3def6bf780a1521f144e41"&gt;Spring Cloud Data Flow&lt;/a&gt; developer surveys, it was evident that our samples, docs, and guides need some improvement.&lt;/p&gt;
&lt;p&gt;We are determined to improve this! The SCDF Team is working on a more hands-on developer guide that goes into the depth of various concepts, features, deployment options, and among many other topics. We are calling it ¡°Spring Cloud Data Flow Microsite¡± - a standalone application with all the collateral structured to speak to the developer personas more directly. The larger theme for the 2.1.0 release is just the Microsite - more on this topic in the next milestone - stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Switched to ZenHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From a product backlog perspective, we have switched and migrated all the GitHub backlog from Waffle to ZenHub (see: &lt;a href="https://waffle.io/"&gt;reasons&lt;/a&gt;). If you¡¯re interested in following along the product release progress, you could install the ZenHub plugin for the web browser and navigate to ZenHub tab in the SCDF GitHub repository. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stay in touch&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;StackOverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4.2.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/18/spring-tools-4-2-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2019-04-18:3652</id>
    <updated>2019-04-18T09:16:44Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.2.1 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Atom.&lt;/p&gt;
&lt;p&gt;Highlights from this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; performance: additional performance and memory footprint improvements to symbol indexing, now eats less memory and is faster while doing the initial indexing run&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; new: content-assist for bean types in Spring XML config files&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; new: content-assist for property names in Spring XML config files&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; new: content-assist for bean references in property definitions in Spring XML config files (very rough early cut, needs a lot more work on proposal content, number of proposals, and sorting)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; fixed: empty property values in custom properties not set when launching boot apps (&lt;a href="https://github.com/spring-projects/sts4/issues/275"&gt;#275&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; fixed: content-assist doesn&amp;rsquo;t activate (restart) old language servers anymore&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Atom, please go visit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tools 4: &lt;a href="https://spring.io/tools/"&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found here: &lt;a href="https://github.com/spring-projects/sts4/wiki/Changelog#2019-04-18-421-release"&gt;https://github.com/spring-projects/sts4/wiki/Changelog#2019-04-18-421-release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Tools 4.2.2 is scheduled to be released in late May 2019.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>CVE-2019-3799: Spring Cloud Config 2.1.2, 2.0.4, 1.4.6 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/17/cve-2019-3799-spring-cloud-config-2-1-2-2-0-4-1-4-6-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Spencer Gibb</name>
    </author>
    <id>tag:spring.io,2019-04-16:3649</id>
    <updated>2019-04-17T12:50:03Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;We have released Spring Cloud Config 2.1.2, 2.0.4, and 1.4.6 to address &lt;a href="https://pivotal.io/security/cve-2019-3799"&gt;CVE-2019-3799: Directory Traversal with spring-cloud-config-server&lt;/a&gt;. Please review the information in the CVE report and upgrade immediately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;These fixes will be included in the next release of the respective Spring Cloud release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To override the version in Maven, update the dependency to include the version, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-cloud-config-server&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;2.1.2.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Similarly, in Gradle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-groovy" data-lang="groovy"&gt;dependencies {
	compile('org.springframework.cloud:spring-cloud-config-server:2.1.2.RELEASE')
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-cloud-config/"&gt;Project Page&lt;/a&gt; |
&lt;a href="https://github.com/spring-cloud/spring-cloud-config/"&gt;GitHub&lt;/a&gt; |
&lt;a href="http://stackoverflow.com/questions/tagged/spring-cloud"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Task 2.2.0.M1 is now available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/16/spring-cloud-task-2-2-0-m1-is-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Glenn Renfro</name>
    </author>
    <id>tag:spring.io,2019-04-16:3648</id>
    <updated>2019-04-16T19:15:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that Spring Cloud Task 2.2.0.M1 is now available on Github and the Pivotal download repository. Many thanks to all of those who contributed to this release.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-s-new" class="anchor" name="what-s-new"&gt;&lt;/a&gt;What¡¯s New?&lt;/h2&gt;
&lt;p&gt;Spring Cloud Task 2.2.0.M1 is intended to be the version of the framework aligned with Spring Boot 2.2.0. Updates from 2.0.x include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Update all dependencies.&lt;/li&gt;
  &lt;li&gt;Spring Cloud Task compiles and runs on Java 8, 9, 10, 11, 12.&lt;/li&gt;
  &lt;li&gt;Spring Cloud Task Reference documentation has been modernized.&lt;/li&gt;
  &lt;li&gt;Bug Fixes&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#what-else-is-going-on" class="anchor" name="what-else-is-going-on"&gt;&lt;/a&gt;What Else Is Going On?&lt;/h2&gt;
&lt;p&gt;Beyond the basics to keep Spring Cloud Task up to date with the rest of the ecosystem, we are also working with the Spring Cloud Data Flow team to enhance the overall experience of running tasks with Data Flow. This includes things like documentation that is coming as well as the multi platform support that was released in Spring Cloud Data Flow 2.0.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-do-you-think" class="anchor" name="what-do-you-think"&gt;&lt;/a&gt;What Do You Think?&lt;/h2&gt;
&lt;p&gt;We look forward to your feedback on these new features in &lt;a href="https://github.com/spring-cloud/spring-cloud-task/issues"&gt;Github&lt;/a&gt;, &lt;a href="http://stackoverflow.com/tags/spring-cloud-task"&gt;StackOverflow&lt;/a&gt;, &lt;a href="https://gitter.im/spring-cloud/spring-cloud-task"&gt;Gitter&lt;/a&gt;, or directly via Twitter to &lt;a href="https://twitter.com/michaelminella"&gt;@michaelminella&lt;/a&gt; or &lt;a href="https://twitter.com/cppwfs"&gt;@cppwfs&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.spring.io/spring-cloud-task/"&gt;Spring Cloud Task Home&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-task"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-cloud-task/docs/2.2.0.M1/reference/"&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Flight of the Flux 2 - Debugging Caveats</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/16/flight-of-the-flux-2-debugging-caveats" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Simon Basl¨¦</name>
    </author>
    <id>tag:spring.io,2019-04-16:3647</id>
    <updated>2019-04-16T16:45:13Z</updated>
    <content type="html">&lt;p&gt;This blog post is the second in a series of posts that aim at providing a deeper look into &lt;a href="https://github.com/reactor/reactor-core"&gt;Reactor&lt;/a&gt;&amp;rsquo;s more advanced concepts and inner workings.&lt;/p&gt;
&lt;p&gt;It is derived from my &lt;code&gt;Flight of the Flux&lt;/code&gt; talk, which content I found to be more adapted to a blog post format.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll update the table below with links when the other posts are published, but here is the planned content:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/03/06/flight-of-the-flux-1-assembly-vs-subscription"&gt;Assembly vs Subscription&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Debugging caveats (this post)&lt;/li&gt;
  &lt;li&gt;Concurrent Agnostic&lt;/li&gt;
  &lt;li&gt;Schedulers and &lt;code&gt;publishOn&lt;/code&gt; vs &lt;code&gt;subscribeOn&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Inner workings: work stealing&lt;/li&gt;
  &lt;li&gt;Inner workings: operator fusion&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&amp;rsquo;re missing an introduction to &lt;em&gt;Reactive Streams&lt;/em&gt; and the basic concepts of Reactor, head out to the site&amp;rsquo;s &lt;a href="https://projectreactor.io/learn"&gt;learning section&lt;/a&gt; and the &lt;a href="https://projectreactor.io/docs/core/release/reference"&gt;reference guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Without further ado, let&amp;rsquo;s jump in:&lt;/p&gt;&lt;h2&gt;&lt;a href="#debugging-in-a-reactive-world" class="anchor" name="debugging-in-a-reactive-world"&gt;&lt;/a&gt;Debugging in a Reactive World&lt;/h2&gt;
&lt;p&gt;Switching from an imperative, blocking paradigm to a reactive, non-blocking one brings benefits but also comes with some caveats. One of these is the debugging experience. Why is that?&lt;/p&gt;
&lt;p&gt;Primarily because you&amp;rsquo;ve learned to rely on the good old &lt;em&gt;stacktrace&lt;/em&gt;, but suddenly this invaluable tool becomes far less valuable due to the &lt;strong&gt;asynchronous&lt;/strong&gt; aspect of reactive programming. This is not specific to reactive programming though: as soon as you introduce asynchronous code, you create a boundary in the program between the code that &lt;em&gt;schedules&lt;/em&gt; and the code that &lt;em&gt;asynchronously executes&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#demonstrating-the-issue-with-vanilla-async-code" class="anchor" name="demonstrating-the-issue-with-vanilla-async-code"&gt;&lt;/a&gt;Demonstrating the issue with vanilla async code&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s take an example with an &lt;code&gt;ExecutorService&lt;/code&gt; and a &lt;code&gt;Future&lt;/code&gt; (no Reactor code here):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;	private static void imperative() throws ExecutionException, InterruptedException {&#xD;
		final ScheduledExecutorService executor =&#xD;
				Executors.newSingleThreadScheduledExecutor();&#xD;
&#xD;
		int seconds = LocalTime.now().getSecond();&#xD;
		List&amp;lt;Integer&amp;gt; source;&#xD;
		if (seconds % 2 == 0) {&#xD;
			source = IntStream.range(1, 11).boxed().collect(Collectors.toList());&#xD;
		}&#xD;
		else if (seconds % 3 == 0) {&#xD;
			source = IntStream.range(0, 4).boxed().collect(Collectors.toList());&#xD;
		}&#xD;
		else {&#xD;
			source = Arrays.asList(1, 2, 3, 4);&#xD;
		}&#xD;
&#xD;
		executor.submit(() -&amp;gt; source.get(5))  //line 76&#xD;
		        .get();&#xD;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example is a bit contrived, but let&amp;rsquo;s imagine that we have these two out of three path in the code that can lead to the asynchronous task throwing an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;&amp;hellip; How helpful would the stacktrace be?&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;java.util.concurrent.ExecutionException: java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 4&#xD;
	at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)&#xD;
	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)&#xD;
	at Scratch.imperative(Scratch.java:77)&#xD;
	at Scratch.main(Scratch.java:50)&#xD;
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 4&#xD;
	at java.base/java.util.Arrays$ArrayList.get(Arrays.java:4351)&#xD;
	at Scratch.lambda$imperative$0(Scratch.java:76)&#xD;
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#xD;
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)&#xD;
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)&#xD;
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)&#xD;
	at java.base/java.lang.Thread.run(Thread.java:834)&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;code&gt;Future&lt;/code&gt;&amp;rsquo;s &lt;code&gt;get()&lt;/code&gt; method threw an &lt;code&gt;ExecutionException&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the cause is an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the code throwing is in the &lt;code&gt;submit(() -&amp;gt; source.get(5))&lt;/code&gt; &lt;strong&gt;lambda&lt;/strong&gt; line 76&lt;/li&gt;
  &lt;li&gt;it executed in a &lt;code&gt;FutureTask&lt;/code&gt;, from something called a &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;, itself running in a &lt;code&gt;Thread&lt;/code&gt;&amp;hellip;&lt;/li&gt;
  &lt;li&gt;we have two potential sources that could cause this but no idea which one is the culprit (which path was taken in the test prior to calling &lt;code&gt;submit()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not terribly useful :-(&lt;/p&gt;&lt;h3&gt;&lt;a href="#demonstrating-the-issue-in-reactor" class="anchor" name="demonstrating-the-issue-in-reactor"&gt;&lt;/a&gt;Demonstrating the issue in Reactor&lt;/h3&gt;
&lt;p&gt;If we look for a Reactor equivalent to the above code, we can come up with this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;	private static void reactive() {&#xD;
		int seconds = LocalTime.now().getSecond();&#xD;
		Mono&amp;lt;Integer&amp;gt; source;&#xD;
		if (seconds % 2 == 0) {&#xD;
			source = Flux.range(1, 10)&#xD;
			             .elementAt(5);&#xD;
		}&#xD;
		else if (seconds % 3 == 0) {&#xD;
			source = Flux.range(0, 4)&#xD;
			             .elementAt(5);&#xD;
		}&#xD;
		else {&#xD;
			source = Flux.just(1, 2, 3, 4)&#xD;
			             .elementAt(5);&#xD;
		}&#xD;
&#xD;
		source.subscribeOn(Schedulers.parallel())&#xD;
		      .block(); //line 97&#xD;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which triggers the following stacktrace:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;java.lang.IndexOutOfBoundsException&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.onComplete(MonoElementAt.java:153)&#xD;
	at reactor.core.publisher.FluxArray$ArraySubscription.fastPath(FluxArray.java:176)&#xD;
	at reactor.core.publisher.FluxArray$ArraySubscription.request(FluxArray.java:96)&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.request(MonoElementAt.java:92)&#xD;
	at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.trySchedule(MonoSubscribeOn.java:186)&#xD;
	at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onSubscribe(MonoSubscribeOn.java:131)&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.onSubscribe(MonoElementAt.java:107)&#xD;
	at reactor.core.publisher.FluxArray.subscribe(FluxArray.java:53)&#xD;
	at reactor.core.publisher.FluxArray.subscribe(FluxArray.java:59)&#xD;
	at reactor.core.publisher.MonoElementAt.subscribe(MonoElementAt.java:59)&#xD;
	at reactor.core.publisher.Mono.subscribe(Mono.java:3711)&#xD;
	at reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:123)&#xD;
	at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)&#xD;
	at reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)&#xD;
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#xD;
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)&#xD;
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)&#xD;
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)&#xD;
	at java.base/java.lang.Thread.run(Thread.java:834)&#xD;
	Suppressed: java.lang.Exception: #block terminated with an error&#xD;
		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:93)&#xD;
		at reactor.core.publisher.Mono.block(Mono.java:1495)&#xD;
		at Scratch.reactive(Scratch.java:97)&#xD;
		at Scratch.main(Scratch.java:51)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;We see the &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; again, hinting at a source that was too short for the &lt;code&gt;MonoElementAt&lt;/code&gt; operator&lt;/li&gt;
  &lt;li&gt;We see that it came from an &lt;code&gt;onComplete&lt;/code&gt;, itself triggered by &lt;code&gt;request&lt;/code&gt;&amp;hellip; and a bunch of other steps in &lt;code&gt;reactor.core.publisher&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;With a bit of familiarity with these reactor methods, we &lt;em&gt;might&lt;/em&gt; deduce that the pipeline was made up of &lt;code&gt;range&lt;/code&gt; (&lt;code&gt;FluxRange.subscribe&lt;/code&gt;), &lt;code&gt;elementAt&lt;/code&gt; and &lt;code&gt;subscribeOn&lt;/code&gt;&amp;hellip;&lt;/li&gt;
  &lt;li&gt;It seems the throwing code was executed from the worker &lt;code&gt;Thread&lt;/code&gt; of a &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The trail goes cold here&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Worse, even if we did get rid of &lt;code&gt;subscribeOn&lt;/code&gt; we&amp;rsquo;d still wouldn&amp;rsquo;t discover which of the two possible error paths was triggered:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;	private static void reactiveNoSubscribeOn() {&#xD;
		int seconds = LocalTime.now().getSecond();&#xD;
		Mono&amp;lt;Integer&amp;gt; source;&#xD;
		if (seconds % 2 == 0) {&#xD;
			source = Flux.range(1, 10)&#xD;
			             .elementAt(5);&#xD;
		}&#xD;
		else if (seconds % 3 == 0) {&#xD;
			source = Flux.range(0, 4)&#xD;
			             .elementAt(5);&#xD;
		}&#xD;
		else {&#xD;
			source = Flux.just(1, 2, 3, 4)&#xD;
			             .elementAt(5);&#xD;
		}&#xD;
&#xD;
		source.block(); //line 116&#xD;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gives the stacktrace:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;java.lang.IndexOutOfBoundsException&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.onComplete(MonoElementAt.java:153)&#xD;
	at reactor.core.publisher.FluxArray$ArraySubscription.fastPath(FluxArray.java:176)&#xD;
	at reactor.core.publisher.FluxArray$ArraySubscription.request(FluxArray.java:96)&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.request(MonoElementAt.java:92)&#xD;
	at reactor.core.publisher.BlockingSingleSubscriber.onSubscribe(BlockingSingleSubscriber.java:49)&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.onSubscribe(MonoElementAt.java:107)&#xD;
	at reactor.core.publisher.FluxArray.subscribe(FluxArray.java:53)&#xD;
	at reactor.core.publisher.FluxArray.subscribe(FluxArray.java:59)&#xD;
	at reactor.core.publisher.MonoElementAt.subscribe(MonoElementAt.java:59)&#xD;
	at reactor.core.publisher.Mono.block(Mono.java:1494)&#xD;
	at Scratch.reactiveNoSubscribeOn(Scratch.java:116)&#xD;
	at Scratch.main(Scratch.java:52)&#xD;
	Suppressed: java.lang.Exception: #block terminated with an error&#xD;
		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:93)&#xD;
		at reactor.core.publisher.Mono.block(Mono.java:1495)&#xD;
		... 2 more
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is because, as we saw previously, there is an additional &amp;ldquo;boundary&amp;rdquo; in code between &lt;em&gt;assembly&lt;/em&gt; and &lt;em&gt;subscription&lt;/em&gt;. The trail only goes back to the point of &lt;strong&gt;subscription&lt;/strong&gt; (here the &lt;code&gt;block()&lt;/code&gt;) :-(&lt;/p&gt;
&lt;p&gt;So using stacktraces for analysis and debugging purposes is harder in an asynchronous world, and even a bit harder in Reactor (because it is asynchronous and has a lazy-by-default approach with assembly vs subscription). But fortunately there are tools in the library to try and alleviate that fact.&lt;/p&gt;&lt;h2&gt;&lt;a href="#making-things-better" class="anchor" name="making-things-better"&gt;&lt;/a&gt;Making Things Better&lt;/h2&gt;&lt;h3&gt;&lt;a href="#back-to-classics-code-log-code" class="anchor" name="back-to-classics-code-log-code"&gt;&lt;/a&gt;Back to classics: &lt;code&gt;log&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Remember when you sprinkled your imperative code with &lt;code&gt;print&lt;/code&gt; statements? It might not be as cool as firing up the step debugger, but sometimes it is the quick and dirty solution you need.&lt;/p&gt;
&lt;p&gt;In Reactor, you have the &lt;code&gt;log()&lt;/code&gt; operator:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It logs Reactive Stream signals: &lt;code&gt;onNext&lt;/code&gt;, &lt;code&gt;onComplete&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt; (and &lt;strong&gt;even&lt;/strong&gt; &lt;code&gt;onSubscribe&lt;/code&gt;, &lt;code&gt;cancel&lt;/code&gt; and &lt;code&gt;request&lt;/code&gt;!)&lt;/li&gt;
  &lt;li&gt;You can tune it to whitelist only part of these signals&lt;/li&gt;
  &lt;li&gt;You can choose a particular &lt;code&gt;Logger&lt;/code&gt; as well&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, &lt;code&gt;log&lt;/code&gt; is the quick and dirty solution to get an easy bird eye&amp;rsquo;s view of what is going on at one step of your sequence. Use it liberally during development, with the possibility of specifying a &amp;ldquo;name&amp;rdquo; to each &lt;code&gt;log&lt;/code&gt; call to differentiate them.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;log(String)&lt;/code&gt; can be diverted to get a hint at which source causes the error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;	private static void log() {&#xD;
		int seconds = LocalTime.now().getSecond();&#xD;
		Mono&amp;lt;Integer&amp;gt; source;&#xD;
		if (seconds % 2 == 0) {&#xD;
			source = Flux.range(1, 10)&#xD;
			             .elementAt(5)&#xD;
			             .log(&amp;quot;source A&amp;quot;);&#xD;
		}&#xD;
		else if (seconds % 3 == 0) {&#xD;
			source = Flux.range(0, 4)&#xD;
			             .elementAt(5)&#xD;
			             .log(&amp;quot;source B&amp;quot;);&#xD;
		}&#xD;
		else {&#xD;
			source = Flux.just(1, 2, 3, 4)&#xD;
			             .elementAt(5)&#xD;
			             .log(&amp;quot;source C&amp;quot;);&#xD;
		}&#xD;
&#xD;
		source.block(); //line 138&#xD;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The stacktrace itself isn&amp;rsquo;t much more interesting (apart from mentioning the &lt;code&gt;MonoLogFuseable&lt;/code&gt; class, but the log itself contains this interesting tidbit:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;17:01:23.711 [main] INFO  source C - | onSubscribe([Fuseable] MonoElementAt.ElementAtSubscriber)&#xD;
17:01:23.716 [main] INFO  source C - | request(unbounded)&#xD;
17:01:23.717 [main] ERROR source C - | onError(java.lang.IndexOutOfBoundsException)&#xD;
17:01:23.721 [main] ERROR source C - &#xD;
java.lang.IndexOutOfBoundsException: null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At least we get our hardcoded &lt;code&gt;source C&lt;/code&gt; label&amp;hellip;&lt;/p&gt;&lt;h3&gt;&lt;a href="#enriching-stacktraces-with-debug-mode" class="anchor" name="enriching-stacktraces-with-debug-mode"&gt;&lt;/a&gt;Enriching stacktraces with Debug Mode&lt;/h3&gt;
&lt;p&gt;Another approach that is available in Reactor is to try and get back the assembly information in the runtime stacktraces.&lt;/p&gt;
&lt;p&gt;This can be done by activating the so-called &amp;ldquo;debug mode&amp;rdquo; via the &lt;code&gt;Hooks&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Hooks.onOperatorDebug();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What does it do? It makes each operator instantiation (aka assembly) capture a stacktrace and keep it for later.&lt;/p&gt;
&lt;p&gt;If an &lt;code&gt;onError&lt;/code&gt; reaches one operator, it will attach that assembly stacktrace to the &lt;code&gt;onError&lt;/code&gt; &amp;rsquo;s &lt;code&gt;Throwable&lt;/code&gt; (as a &lt;strong&gt;suppressed &lt;code&gt;Exception&lt;/code&gt;&lt;/strong&gt;). As a result, when you see the stacktrace you&amp;rsquo;ll get a more complete picture of both the runtime AND the assembly.&lt;/p&gt;
&lt;p&gt;With debug mode on, in our earlier example we would be able to see which assembly path was taken and which source was actually processed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;	private static void hook() {&#xD;
		Hooks.onOperatorDebug();&#xD;
		try {&#xD;
			int seconds = LocalTime.now().getSecond();&#xD;
			Mono&amp;lt;Integer&amp;gt; source;&#xD;
			if (seconds % 2 == 0) {&#xD;
				source = Flux.range(1, 10)&#xD;
				             .elementAt(5); //line 149&#xD;
			}&#xD;
			else if (seconds % 3 == 0) {&#xD;
				source = Flux.range(0, 4)&#xD;
				             .elementAt(5); //line 153&#xD;
			}&#xD;
			else {&#xD;
				source = Flux.just(1, 2, 3, 4)&#xD;
				             .elementAt(5); //line 157&#xD;
			}&#xD;
&#xD;
			source.block(); //line 160&#xD;
		}&#xD;
		finally {&#xD;
			Hooks.resetOnOperatorDebug();&#xD;
		}&#xD;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which produces the following stacktrace:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;java.lang.IndexOutOfBoundsException&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.onComplete(MonoElementAt.java:153)&#xD;
(...)&#xD;
	at reactor.core.publisher.Mono.block(Mono.java:1494)&#xD;
	at Scratch.hook(Scratch.java:160)&#xD;
	at Scratch.main(Scratch.java:54)&#xD;
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: &#xD;
Assembly trace from producer [reactor.core.publisher.MonoElementAt] :&#xD;
	reactor.core.publisher.Flux.elementAt(Flux.java:4367)&#xD;
	Scratch.hook(Scratch.java:157)&#xD;
Error has been observed by the following operator(s):&#xD;
	|_	Flux.elementAt ? Scratch.hook(Scratch.java:157)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the last line? Yay :-D&lt;/p&gt;&lt;h3&gt;&lt;a href="#bringing-the-cost-down-with-code-checkpoint-code" class="anchor" name="bringing-the-cost-down-with-code-checkpoint-code"&gt;&lt;/a&gt;Bringing the cost down with &lt;code&gt;checkpoint&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;One drawback of using &lt;code&gt;Hooks.onOperatorDebug()&lt;/code&gt; is that it does the assembly stacktrace capture &lt;strong&gt;for every single operator used in the application&lt;/strong&gt;. Filling a single stacktrace is a costly operation, so it goes without saying that this can have an heavy impact on performance. As a result, this is only recommended in a development setting.&lt;/p&gt;
&lt;p&gt;Fortunately, you can bring the cost down a little if you identify parts of your codebase that are prone to that sort of source ambiguity.&lt;/p&gt;
&lt;p&gt;By using the &lt;code&gt;checkpoint()&lt;/code&gt; operator, it is possible to activate the assembly trace capture only at that specific point in the codebase. You can even do entirely without the filling of a stacktrace if you give the checkpoint a unique and meaningful name using &lt;code&gt;checkpoint(String)&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;	private static void checkpoint() {&#xD;
		int seconds = LocalTime.now().getSecond();&#xD;
		Mono&amp;lt;Integer&amp;gt; source;&#xD;
		if (seconds % 2 == 0) {&#xD;
			source = Flux.range(1, 10)&#xD;
			             .elementAt(5)&#xD;
			             .checkpoint(&amp;quot;source range(1,10)&amp;quot;);&#xD;
		}&#xD;
		else if (seconds % 3 == 0) {&#xD;
			source = Flux.range(0, 4)&#xD;
			             .elementAt(5)&#xD;
			             .checkpoint(&amp;quot;source range(0,4)&amp;quot;);&#xD;
		}&#xD;
		else {&#xD;
			source = Flux.just(1, 2, 3, 4)&#xD;
			             .elementAt(5)&#xD;
			             .checkpoint(&amp;quot;source just(1,2,3,4)&amp;quot;);&#xD;
		}&#xD;
&#xD;
		source.block(); //line 186&#xD;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces the following stacktrace:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;java.lang.IndexOutOfBoundsException&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.onComplete(MonoElementAt.java:153)&#xD;
	at reactor.core.publisher.FluxArray$ArraySubscription.fastPath(FluxArray.java:176)&#xD;
	at reactor.core.publisher.FluxArray$ArraySubscription.request(FluxArray.java:96)&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.request(MonoElementAt.java:92)&#xD;
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:438)&#xD;
	at reactor.core.publisher.BlockingSingleSubscriber.onSubscribe(BlockingSingleSubscriber.java:49)&#xD;
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:422)&#xD;
	at reactor.core.publisher.MonoElementAt$ElementAtSubscriber.onSubscribe(MonoElementAt.java:107)&#xD;
	at reactor.core.publisher.FluxArray.subscribe(FluxArray.java:53)&#xD;
	at reactor.core.publisher.FluxArray.subscribe(FluxArray.java:59)&#xD;
	at reactor.core.publisher.MonoElementAt.subscribe(MonoElementAt.java:59)&#xD;
	at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61)&#xD;
	at reactor.core.publisher.Mono.block(Mono.java:1494)&#xD;
	at Scratch.checkpoint(Scratch.java:186)&#xD;
	at Scratch.main(Scratch.java:55)&#xD;
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: &#xD;
Assembly site of producer [reactor.core.publisher.MonoElementAt] is identified by light checkpoint [source just(1,2,3,4)].
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;is identified by light checkpoint [source just(1,2,3,4)].&lt;/code&gt;, which gives us our culprit (because we used a meaningful description for the checkpoint).&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we&amp;rsquo;ve learned that stacktraces can be less useful in asynchronous programming. This effect is further compounded by the lazy way Reactor let you build reactive sequences.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve looked at the worst cases that can be encountered and at several ways this problem can be lessened.&lt;/p&gt;
&lt;p&gt;The whole code can be found in a gist &lt;a href="https://gist.github.com/simonbasle/a4c6cfe79071610e1fe3bd27984d4381"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the next instalment, we&amp;rsquo;ll see why we sometimes say that Reactor is &amp;ldquo;Concurrent Agnostic&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In the meantime, happy reactive coding!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Introducing Spring Cloud Circuit Breaker</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/16/introducing-spring-cloud-circuit-breaker" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ryan Baxter</name>
    </author>
    <id>tag:spring.io,2019-04-15:3643</id>
    <updated>2019-04-16T15:54:00Z</updated>
    <content type="html">&lt;h1&gt;&lt;a href="#background" class="anchor" name="background"&gt;&lt;/a&gt;Background&lt;/h1&gt;
&lt;p&gt;When using a microservices architecture to build our applications, it is very common to end up with a pretty complex dependency tree amongst services. If the service down the dependency tree encounters an issue that causes it to start to respond slowly, it ends up causing a set of issues that cascade up the dependency tree. As more and more requests come in to the application, more and more resources may be consumed by waiting for the slow service to respond. Even worse, the additional load being put on the slow service may exacerbate the problem. To help alleviate the effect of these types of cascading failures, it is common practice to use &lt;a href="https://microservices.io/patterns/reliability/circuit-breaker.html"&gt;circuit breakers&lt;/a&gt; as part of microservice applications.&lt;/p&gt;
&lt;p&gt;Spring Cloud has &lt;a href="https://spring.io/guides/gs/circuit-breaker/"&gt;let developers add circuit breakers&lt;/a&gt; to their application by using &lt;a href="https://github.com/Netflix/Hystrix"&gt;Netflix Hystrix&lt;/a&gt; as part of the &lt;a href="https://github.com/spring-cloud/spring-cloud-netflix"&gt;Spring Cloud Netflix project&lt;/a&gt;. In addition to Hystrix, Spring Cloud developers may want to use other circuit breaker implementations. To help Spring Cloud developers add circuit breakers to their applications in a consistent manner, we have introduced the &lt;a href="https://github.com/spring-cloud-incubator/spring-cloud-circuitbreaker"&gt;Spring Cloud Circuit Breaker project&lt;/a&gt; as part of the Spring Cloud incubator.&lt;/p&gt;&lt;h1&gt;&lt;a href="#about" class="anchor" name="about"&gt;&lt;/a&gt;About&lt;/h1&gt;
&lt;p&gt;The Spring Cloud Circuit Breaker project provides an abstraction API for adding circuit breakers to your application. At the time of this blog post, there are four supported implementations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/Netflix/Hystrix"&gt;Hystrix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/resilience4j/resilience4j"&gt;Resilience4J&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/alibaba/Sentinel"&gt;Sentinel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-retry"&gt;Spring Retry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use a given implementation, add the appropriate &lt;a href="https://github.com/spring-cloud-incubator/spring-cloud-circuitbreaker/tree/master/spring-cloud-starter-circuitbreaker"&gt;starter&lt;/a&gt; to your application&amp;rsquo;s classpath.&lt;/p&gt;&lt;h1&gt;&lt;a href="#using-spring-cloud-circuit-breaker" class="anchor" name="using-spring-cloud-circuit-breaker"&gt;&lt;/a&gt;Using Spring Cloud Circuit Breaker&lt;/h1&gt;
&lt;p&gt;Currently, Spring Cloud Circuit Breaker is not part of the Spring Cloud BOM and is being published only to our &lt;a href="https://repo.spring.io/snapshot/org/springframework/cloud/spring-cloud-circuitbreaker/"&gt;snapshot repo&lt;/a&gt;. You need to add our snapshot repo to your Maven or Gradle file. The following example uses Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;repositories&amp;gt;&#xD;
    &amp;lt;repository&amp;gt;&#xD;
        &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;&#xD;
        &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;&#xD;
        &amp;lt;url&amp;gt;https://repo.spring.io/libs-snapshot-local&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;snapshots&amp;gt;&#xD;
            &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xD;
        &amp;lt;/snapshots&amp;gt;&#xD;
        &amp;lt;releases&amp;gt;&#xD;
            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xD;
        &amp;lt;/releases&amp;gt;&#xD;
    &amp;lt;/repository&amp;gt;&#xD;
&amp;lt;/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, you need to add the Spring Cloud Circuit Breaker dependency to your application. Again, the following example uses Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;&#xD;
            spring-cloud-starter-circuitbreaker-resilience4j&#xD;
       &amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;version&amp;gt;0.0.1.BUILD-SNAPSHOT&amp;lt;/version&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring Cloud Circuit Breaker auto-configures an implementation of &lt;code&gt;CircuitBreakerFactory&lt;/code&gt;, based on the starter on your application&amp;rsquo;s classpath. You can then inject this interface into any class you want. The following example shows how to do so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Service&#xD;
public static class DemoControllerService {&#xD;
	private RestTemplate rest;&#xD;
	private CircuitBreakerFactory cbFactory;&#xD;
&#xD;
	public DemoControllerService(RestTemplate rest, &#xD;
                CircuitBreakerFactory cbFactory) {&#xD;
		this.rest = rest;&#xD;
		this.cbFactory = cbFactory;&#xD;
	}&#xD;
&#xD;
	public String slow() {&#xD;
		return cbFactory.create(&amp;quot;slow&amp;quot;).run(() -&amp;gt; &#xD;
                rest.getForObject(&amp;quot;/slow&amp;quot;, String.class),&#xD;
                throwable -&amp;gt; &amp;quot;fallback&amp;quot;);&#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most implementations also support Reactive APIs. Currently, Spring Retry is the only implementation that does not have a reactive implementation. If you want to wrap some reactive code in a circuit breaker ,you need to use &lt;code&gt;ReactiveCircuitBreakerFactory&lt;/code&gt;. The following example shows how to do so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Service&#xD;
public static class DemoControllerService {&#xD;
	private ReactiveCircuitBreakerFactory cbFactory;&#xD;
	private WebClient webClient;&#xD;
&#xD;
&#xD;
	public DemoControllerService(WebClient webClient, &#xD;
                ReactiveCircuitBreakerFactory cbFactory) {&#xD;
		this.webClient = webClient;&#xD;
		this.cbFactory = cbFactory;&#xD;
	}&#xD;
&#xD;
	public Mono&amp;lt;String&amp;gt; slow() {&#xD;
		return webClient.get().uri(&amp;quot;/slow&amp;quot;).retrieve()&#xD;
                .bodyToMono(String.class).transform(it -&amp;gt; {&#xD;
			CircuitBreaker cb = cbFactory.create(&amp;quot;slow&amp;quot;);&#xD;
			return cb.run(it, throwable -&amp;gt; &#xD;
                            Mono.just(&amp;quot;fallback&amp;quot;));&#xD;
                });&#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;a href="#configuring-circuit-breakers" class="anchor" name="configuring-circuit-breakers"&gt;&lt;/a&gt;Configuring Circuit Breakers&lt;/h1&gt;
&lt;p&gt;In most cases, you are going to want to configure the behavior of your circuit breakers. To do so, you can create beans of type &lt;code&gt;Customizer&lt;/code&gt;. Spring Cloud Circuit Breaker lets you provide a default configuration for all circuit breakers as well as configuration for specific circuit breakers. For example, to provide a default configuration for all circuit breakers when using Resilience4J you could add the following bean to a configuration class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Bean&#xD;
public Customizer&amp;lt;Resilience4JCircuitBreakerFactory&amp;gt; defaultCustomizer() {&#xD;
	return factory -&amp;gt; factory.configureDefault(&#xD;
            id -&amp;gt; new Resilience4JConfigBuilder(id)&#xD;
            .timeLimiterConfig(TimeLimiterConfig.custom()&#xD;
                .timeoutDuration(Duration.ofSeconds(4)).build())&#xD;
            .circuitBreakerConfig(CircuitBreakerConfig.ofDefaults())&#xD;
            .build());&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code to configure an individual circuit breaker would look very similar, except you would provide a circuit breaker ID in your &lt;code&gt;Customizer&lt;/code&gt;, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Bean&#xD;
public Customizer&amp;lt;Resilience4JCircuitBreakerFactory&amp;gt; slowCustomizer() {&#xD;
	return factory -&amp;gt; factory.configure(builder -&amp;gt; {&#xD;
		return builder&#xD;
			.timeLimiterConfig(TimeLimiterConfig.custom()&#xD;
                            .timeoutDuration(Duration.ofSeconds(2)).build())&#xD;
			.circuitBreakerConfig(&#xD;
                            CircuitBreakerConfig.ofDefaults());&#xD;
	}, &amp;quot;slow&amp;quot;);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;a href="#feedback" class="anchor" name="feedback"&gt;&lt;/a&gt;Feedback&lt;/h1&gt;
&lt;p&gt;We look forward to hearing what you think about this new project. Check out the &lt;a href="https://github.com/spring-cloud-incubator/spring-cloud-circuitbreaker"&gt;GitHub project&lt;/a&gt; as well as the &lt;a href="https://spring-cloud-incubator.github.io/spring-cloud-circuitbreaker/spring-cloud-circuitbreaker.html"&gt;documentation&lt;/a&gt; for more information. As always, you can reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt; and &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt; or by creating a &lt;a href="https://github.com/spring-cloud-incubator/spring-cloud-circuitbreaker/issues"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.2.0.M2 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/16/spring-security-5-2-0-m2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Josh Cummings</name>
    </author>
    <id>tag:spring.io,2019-04-15:3644</id>
    <updated>2019-04-16T15:25:35Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I¡¯m pleased to announce the release of
Spring Security 5.2.0.M2! This release includes
&lt;a href="https://github.com/spring-projects/spring-security/milestone/132?closed=1"&gt;100+
updates&lt;/a&gt;. You can find the highlights below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="oauth-2-0"&gt;&lt;a class="anchor" href="#oauth-2-0"&gt;&lt;/a&gt;OAuth 2.0&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-6446-gh-6446-a-client-support-for-pkce"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-6446-gh-6446-a-client-support-for-pkce"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/6446"&gt;gh-6446&lt;/a&gt; - Client Support for PKCE&lt;/h5&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://tools.ietf.org/html/rfc7636"&gt;PKCE&lt;/a&gt; isn&amp;#8217;t just for &lt;a href="https://tools.ietf.org/html/rfc8252"&gt;native&lt;/a&gt; or &lt;a href="https://tools.ietf.org/html/draft-ietf-oauth-browser-based-apps-01"&gt;browser-based apps&lt;/a&gt;, but for any time we want to have a public client. Spring Security 5.2 introduces a secure way for backends to authenticate as public clients.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-5350-gh-5350-a-openid-connect-rp-initiated-logout"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-5350-gh-5350-a-openid-connect-rp-initiated-logout"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/5350"&gt;gh-5350&lt;/a&gt; - OpenID Connect RP-Initiated Logout&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-5465-gh-5465-a-ability-to-use-symmetric-keys-with-code-jwtdecoder-code"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-5465-gh-5465-a-ability-to-use-symmetric-keys-with-code-jwtdecoder-code"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/5465"&gt;gh-5465&lt;/a&gt; - Ability to use symmetric keys with &lt;code&gt;JwtDecoder&lt;/code&gt;&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-5937-gh-5397-a-ability-for-code-nimbusreactivejwtdecoder-code-to-take-a-custom-processor"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-5937-gh-5397-a-ability-for-code-nimbusreactivejwtdecoder-code-to-take-a-custom-processor"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/5937"&gt;gh-5397&lt;/a&gt; - Ability for &lt;code&gt;NimbusReactiveJwtDecoder&lt;/code&gt; to take a custom processor&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-6513-gh-6513-a-a-href-https-github-com-spring-projects-spring-security-issues-5200-gh-5200-a-support-for-resource-server-token-introspection"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-6513-gh-6513-a-a-href-https-github-com-spring-projects-spring-security-issues-5200-gh-5200-a-support-for-resource-server-token-introspection"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/6513"&gt;gh-6513&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/spring-projects/spring-security/issues/5200"&gt;gh-5200&lt;/a&gt; - Support for Resource Server Token Introspection&lt;/h5&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Resource Server now supports a second OAuth 2.0 token verification strategy: &lt;a href="https://github.com/spring-projects/spring-security/tree/master/samples/boot/oauth2resourceserver-opaque"&gt;Token Introspection&lt;/a&gt;. This is handy when a Resource Server wants to or must verify the token remotely.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-5351-gh-5351-a-support-for-resource-server-multi-tenancy-servlet-only"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-5351-gh-5351-a-support-for-resource-server-multi-tenancy-servlet-only"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/5351"&gt;gh-5351&lt;/a&gt; - Support for Resource Server Multi-tenancy (Servlet only)&lt;/h5&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With the introduction of &lt;code&gt;AuthenticationManagerResolver&lt;/code&gt;, initial support for &lt;a href="https://github.com/spring-projects/spring-security/tree/master/samples/boot/oauth2resourceserver-multitenancy"&gt;multi-tenant Resource Servers&lt;/a&gt; has arrived.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="core"&gt;&lt;a class="anchor" href="#core"&gt;&lt;/a&gt;Core&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-6494-gh-6494-a-converting-key-material-into-code-key-code-instances"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-6494-gh-6494-a-converting-key-material-into-code-key-code-instances"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/6494"&gt;gh-6494&lt;/a&gt; - Converting key material into &lt;code&gt;Key&lt;/code&gt; instances&lt;/h5&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Security 5.2 simplifies converting X.509 and PKCS#8 key material into &lt;code&gt;RSAPublicKey&lt;/code&gt; and &lt;code&gt;RSAPrivateKey&lt;/code&gt; instances by registering &lt;code&gt;Converter&lt;/code&gt; s to the &lt;code&gt;ConversionService&lt;/code&gt; and &lt;code&gt;PropertyEditor&lt;/code&gt; s to the &lt;code&gt;PropertyEditorRegistry&lt;/code&gt;. You can see an example in the &lt;a href="https://github.com/spring-projects/spring-security/blob/master/samples/boot/oauth2resourceserver-static/src/main/java/sample/OAuth2ResourceServerSecurityConfiguration.java#L34"&gt;Resource Server static key sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-6774-gh-6774-a-support-for-jdk-12"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-6774-gh-6774-a-support-for-jdk-12"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/6774"&gt;gh-6774&lt;/a&gt; - Support for JDK 12&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-6722-gh-6722-a-introducing-code-authenticationmanagerresolver-code"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-6722-gh-6722-a-introducing-code-authenticationmanagerresolver-code"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/6722"&gt;gh-6722&lt;/a&gt; - Introducing &lt;code&gt;AuthenticationManagerResolver&lt;/code&gt;&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-6546-gh-6546-a-introducing-code-currentsecuritycontext-code-for-method-arguments"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-6546-gh-6546-a-introducing-code-currentsecuritycontext-code-for-method-arguments"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/6546"&gt;gh-6546&lt;/a&gt; - Introducing &lt;code&gt;@CurrentSecurityContext&lt;/code&gt; for method arguments&lt;/h5&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Like &lt;code&gt;@AuthenticationPrincipal&lt;/code&gt; before it, &lt;code&gt;@CurrentSecurityContext&lt;/code&gt; works with an argument resolver to retrieve aspects of the &lt;code&gt;SecurityContext&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;public String hello(@CurrentSecurityContext
        SecurityContext context) {
    return Optional.ofNullable(context.getAuthentication())
            .map(Authentication::getName).orElse("world");
}

// or

public String hello(@CurrentSecurityContext
        (expression="authentication.name") String name) {
    return Optional.ofNullable(name).orElse("world");
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="web"&gt;&lt;a class="anchor" href="#web"&gt;&lt;/a&gt;Web&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-4187-gh-4187-a-support-for-the-clear-site-data-header"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-4187-gh-4187-a-support-for-the-clear-site-data-header"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/4187"&gt;gh-4187&lt;/a&gt; - Support for the Clear-Site-Data header&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-6312-gh-6312-a-support-for-hsts-preload"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-6312-gh-6312-a-support-for-hsts-preload"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/6312"&gt;gh-6312&lt;/a&gt; - Support for HSTS preload&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="a-href-https-github-com-spring-projects-spring-security-issues-6453-gh-6453-a-introducing-code-compositeheaderwriter-code-as-well-as-some-other-a-href-https-github-com-spring-projects-spring-security-issues-6454-header-writing-cleanup-a"&gt;&lt;a class="anchor" href="#a-href-https-github-com-spring-projects-spring-security-issues-6453-gh-6453-a-introducing-code-compositeheaderwriter-code-as-well-as-some-other-a-href-https-github-com-spring-projects-spring-security-issues-6454-header-writing-cleanup-a"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/6453"&gt;gh-6453&lt;/a&gt; - Introducing &lt;code&gt;CompositeHeaderWriter&lt;/code&gt;, as well as some other &lt;a href="https://github.com/spring-projects/spring-security/issues/6454"&gt;header-writing cleanup&lt;/a&gt;.&lt;/h5&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; |
&lt;a href="https://docs.spring.io/spring-security/site/docs/5.2.0.M2/reference/htmlsingle/"&gt;Reference&lt;/a&gt;
| &lt;a href="http://stackoverflow.com/questions/tagged/spring-security"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.2 M2</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/16/spring-boot-2-2-m2" />
    <category term="releases" label="Releases" />
    <author>
      <name>Brian Clozel</name>
    </author>
    <id>tag:spring.io,2019-04-16:3646</id>
    <updated>2019-04-16T13:40:04Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone that contributed, I am pleased to announce that the second milestone of Spring Boot 2.2 has been released and is available from &lt;a href="http://repo.spring.io/milestone/"&gt;our milestone repository&lt;/a&gt;. This release closes almost &lt;a href="https://github.com/spring-projects/spring-boot/milestone/134?closed=1"&gt;100 issues and pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Highlights of this milestone include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Framework 5.2.0.M1&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@ConfigurationProperties&lt;/code&gt; scanning&lt;/li&gt;
  &lt;li&gt;Immutable &lt;code&gt;@ConfigurationProperties&lt;/code&gt; binding&lt;/li&gt;
  &lt;li&gt;Initial RSocket Server Support&lt;/li&gt;
  &lt;li&gt;Lazy Initialization and performance improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of changes and upgrade instructions, please see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes"&gt;Spring Boot 2.2 Release Notes&lt;/a&gt; on the wiki and the &lt;a href="http://docs.spring.io/spring-boot/docs/2.2.0.M2/reference/html/"&gt;updated reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to get started with 2.2 and try out the new features, you can bootstrap a new project on &lt;a href="https://start.spring.io"&gt;https://start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.2.0.M2/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - April 16th, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/16/this-week-in-spring-april-16th-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-04-16:3645</id>
    <updated>2019-04-16T09:08:26Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! What a week it&amp;rsquo;s been! When we last spoke I was in Capetown, South Africa or Johannesburg, South Africa. I&amp;rsquo;ve since been to Mauritius, back to Capetown, Serbia (for the amazing ITKonekt conference) and I&amp;rsquo;m now staring at the beautiful Bund river in beautiful Shanghai, China as I write this. &lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve got a ton to get to this week, as usual, so let&amp;rsquo;s get to it. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hi Spring fans! Welcome to yet another installment of &lt;em&gt;Spring Tips&lt;/em&gt;, this one on the just-released-in-&lt;code&gt;master&lt;/code&gt; support for &lt;a href="https://spring.io/blog/2019/04/15/spring-tips-rsocket-messaging-in-spring-boot-2-2"&gt;RSocket Messaging in Spring Boot 2.2&lt;/a&gt;. It&amp;rsquo;s here! It&amp;rsquo;s finally here! I was so excited to see this land and I hope you get a chance to try it out.&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t miss this webinar coming on April 18th, &lt;a href="https://content.pivotal.io/webinars/apr-18-a-spring-developer-s-guide-to-the-pivotal-cloud-foundry-galaxy-webinar"&gt;&lt;em&gt;A Spring Developer¡¯s Guide to the Pivotal Cloud Foundry Galaxy Webinar&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/04/12/spring-session-for-apache-geode-pivotal-gemfire-2-2-0-m1-available"&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire 2.2.0.M1 Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/04/12/spring-session-for-apache-geode-pivotal-gemfire-2-0-9-release-2-1-3-release-available"&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire 2.0.9.RELEASE &amp;amp; 2.1.3.RELEASE Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this post looking at the future of Kotlin and Spring, &lt;a href="https://spring.io/blog/2019/04/12/going-reactive-with-spring-coroutines-and-kotlin-flow"&gt;&lt;em&gt;Going Reactive with Spring, Coroutines and Kotlin Flow&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In last week&amp;rsquo;s &lt;a href="https://spring.io/blog/2019/04/11/a-bootiful-podcast-rabobank-s-roy-braam-on-building-an-agile-bank"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt; I interview Rabobank&amp;rsquo;s Roy Braam on building an agile bank&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/04/11/spring-data-moore-m3-released"&gt;Spring Data Moore M3 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/04/10/spring-integration-smb-1-1-ga-available"&gt;Spring Integration SMB 1.1 GA Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/04/10/spring-framework-5-2-0-m1-available-now"&gt;Spring Framework 5.2.0.M1 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/04/10/spring-data-lovelace-sr6-kay-sr14-ingalls-sr20-released"&gt;Spring Data Lovelace SR6, Kay SR14, Ingalls SR20 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/04/10/spring-cloud-data-flow-2-0-2-ga-released"&gt;Spring Cloud Data Flow 2.0.2 GA Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Yet another great post on the Okta blog, &lt;a href="https://developer.okta.com/blog/2019/04/15/testing-spring-security-oauth-with-junit"&gt;&lt;em&gt;Upgrading Spring Security OAuth and JUnit Tests through the &#x1f440; of a Java Hipster&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is kind of interesting. It&amp;rsquo;s a blog that demonstrates how to create &lt;a href="https://kauri.io/article/311e46faf254462f9755e245a48de0cb/simple-kotlin-springboot-dapp-utilizing-web3j"&gt;simple Kotlin SpringBoot dApp utilizing web3j&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/mrbwilms/status/1117669789508489216?s=12"&gt;Happy birthday to the Spring Boot Chaos Monkey!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: RSocket Messaging in Spring Boot 2.2</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/15/spring-tips-rsocket-messaging-in-spring-boot-2-2" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-04-13:3642</id>
    <updated>2019-04-15T00:00:00Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! In this installment of Spring Tips Josh revisits RSocket, the reactive application protocol from, among others, Facebook, this time looking at the brand new Spring Framework 5.2 and Spring Boot 2.2 integration. &lt;/p&gt;
&lt;p&gt;speaker: &lt;a href="http://twitter.com/Starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the &lt;a href="https://www.youtube.com/watch?v=GDIDSzZLjjg"&gt;first Spring Tips installment introducing the &amp;ldquo;raw&amp;rdquo; RSocket protocol and Java client library&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/BxHqeq58xrE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Session for Apache Geode &amp; Pivotal GemFire 2.2.0.M1 Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/12/spring-session-for-apache-geode-pivotal-gemfire-2-2-0-m1-available" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2019-04-12:3641</id>
    <updated>2019-04-12T20:07:40Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;I am pleased to announce the release of Spring Session for Apache Geode &amp;amp; Pivotal GemFire (SSDG), 2.2.0.M1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release focuses on dependency updates to align with the rest of the Spring portfolio in their respective release lines, building on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework 5.2.0.M1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data Moore-M3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session 2.2.0.M1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And is targeted for use in Spring Boot 2.2.0.M1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG 2.2.0.M1 bits are available in the Spring libs-milestone repository (&lt;a href="http://repo.spring.io/libs-milestone/org/springframework/session/spring-session-data-geode/2.2.0.M1"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Some of the proposed and upcoming features in the SSDG 2.2 release line include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Attached Sessions (option).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stronger Consistency (option) using &lt;code&gt;Map.replace(key, oldValue, newValue)&lt;/code&gt; for lightweight transactions supplanting the need for heavier, cache/local transactions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improvements in PDX Serialization support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And much more&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, any feedback is much appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-session-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-session"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Session for Apache Geode &amp; Pivotal GemFire 2.0.9.RELEASE &amp; 2.1.3.RELEASE Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/12/spring-session-for-apache-geode-pivotal-gemfire-2-0-9-release-2-1-3-release-available" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2019-04-12:3640</id>
    <updated>2019-04-12T16:40:39Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;I am pleased to announce the release of Spring Session for Apache Geode &amp;amp; Pivotal GemFire (SSDG), 2.0.9.RELEASE and 2.1.3.RELEASE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Both of these releases focus on dependency updates to align with the rest of the Spring portfolio in their respective release lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG 2.0.9.RELEASE builds on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework 5.0.13.RELEASE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data Kay-SR14&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session 2.0.10.RELEASE (Apple-SR9)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And is targeted for use in Spring Boot 2.0.9.RELEASE.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG 2.1.3.RELEASE builds on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework 5.1.6.RELESE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data Lovelace-SR6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session 2.1.5.RELEASE (Bean-SR4)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And is targeted for use in Spring Boot 2.1.4.RELEASE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;All SSDG bits are available in Maven Central (&lt;a href="https://search.maven.org/search?q=g:org.springframework.session%20AND%20a:spring-session-data-geode&amp;amp;core=gav"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;All attention is now focused on the SSDG 2.2 release line, building on Spring Framework 5.2, Spring Data Moore, Spring Session 2.2 and targeted for use in Spring Boot 2.2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Some of the proposed and upcoming features include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Attached Sessions (option).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stronger Consistency (option) using &lt;code&gt;Map.replace(key, oldValue, newValue)&lt;/code&gt; for lightweight transactions supplanting the need for heavier, cache/local transactions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improvements in PDX Serialization support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And much more&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, any feedback is much appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-session-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-session"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Going Reactive with Spring, Coroutines and Kotlin Flow</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/12/going-reactive-with-spring-coroutines-and-kotlin-flow" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>S¨¦bastien Deleuze</name>
    </author>
    <id>tag:spring.io,2019-04-12:3639</id>
    <updated>2019-04-12T08:12:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Since we announced &lt;a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0"&gt;Spring Framework official support for Kotlin&lt;/a&gt; in January 2017, a lot of things happened. Kotlin was announced as an official Android development language at Google I/O 2017, we continued to improve the Kotlin support across Spring portfolio and Kotlin itself has continued to evolve with key new features like &lt;a href="https://kotlinlang.org/docs/reference/coroutines-overview.html"&gt;coroutines&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I would like to take the opportunity of the &lt;a href="https://spring.io/blog/2019/04/10/spring-framework-5-2-0-m1-available-now"&gt;first milestone of Spring Framework 5.2&lt;/a&gt; to give a status overview of where we are when it comes to Spring and Kotlin. And I will make my best to focus on concrete improvements since I believe Spring and Kotlin share the same pragmatic mindset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I think it is all about choices. Choices that we (the Spring team) provide, but also choices that you as application developers have to make when starting a new Spring Boot application. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What language should I use?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Annotated &lt;code&gt;@Controller&lt;/code&gt; or functional style?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring MVC or WebFlux?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;These questions are obviously highly subjective and usually depend on the project context, but I will share my opinionated point of view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="java-or-kotlin"&gt;&lt;a class="anchor" href="#java-or-kotlin"&gt;&lt;/a&gt;Java or Kotlin?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Java is the obvious default choice, but &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt; is an increasingly popular alternative. What are the reasons that could make a developer switch from Java to Kotlin? When people ask me, I usually says that Kotlin allows Java developers to leverage their existing skills to write shorter, safer and more expressive code. But to make an educated choice, we should identify more specific points.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;My favorite Kotlin feature is that it turns &lt;code&gt;null&lt;/code&gt;, the so-called (multiple) "billion-dollar mistake" into a safety feature. The error of Java is not &lt;code&gt;null&lt;/code&gt; itself, it is to not manage &lt;code&gt;null&lt;/code&gt; explicitly in its type system, leading to issues close to what we can observe in dynamic languages. Kotlin embraces &lt;code&gt;null&lt;/code&gt; by using it in its type system to &lt;a href="https://medium.com/@elizarov/dealing-with-absence-of-value-307b80534903"&gt;deal with the absence of value&lt;/a&gt;. In Kotlin, types like &lt;code&gt;String&lt;/code&gt; are not nullable so safe to use without precaution, while types like &lt;code&gt;String?&lt;/code&gt; are nullable and should be used with caution. The good news is that Kotlin compiler will raise potential errors at compile time, and you will be able to handle them gracefully with &lt;a href="https://kotlinlang.org/docs/reference/null-safety.html#safe-calls"&gt;safe calls&lt;/a&gt;, &lt;a href="https://kotlinlang.org/docs/reference/null-safety.html#elvis-operator"&gt;elvis operator&lt;/a&gt; or &lt;a href="https://kotlinlang.org/docs/reference/idioms.html#execute-if-not-null"&gt;execute if not &lt;code&gt;null&lt;/code&gt;&lt;/a&gt; blocks. And unlike Java &lt;code&gt;Optional&lt;/code&gt;, Kotlin null-safety is suitable for input parameters as well and does not force you to use a wrapper that impacts performances and readibility of your code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://kotlinlang.org/docs/reference/type-safe-builders.html"&gt;DSLs&lt;/a&gt; are also another area where Kotlin shines. &lt;a href="https://gradle.org/kotlin/"&gt;Gradle Kotlin DSL&lt;/a&gt; (support on &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt; is &lt;a href="https://github.com/spring-io/initializr/pull/851"&gt;just around the corner&lt;/a&gt;) is a great example, allowing to use a very rich and flexible API with great discoverability and confidence thanks to Kotlin statically typed nature. Spring Framework provides Kotlin DSLs for &lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/languages.html#kotlin-bean-definition-dsl"&gt;bean definition&lt;/a&gt;, &lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/languages.html#kotlin-web"&gt;functional routing&lt;/a&gt; and even &lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/languages.html#mockmvc-dsl"&gt;MockMvc&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I could detail a lot of other good reasons to switch like &lt;a href="https://kotlinlang.org/docs/reference/functions.html#default-arguments"&gt;optional parameters with default values&lt;/a&gt;, the &lt;a href="https://kotlinlang.org/docs/reference/java-interop.html"&gt;great interoperability with Java APIs&lt;/a&gt; (like Spring), &lt;a href="https://kotlinlang.org/docs/reference/"&gt;extension functions&lt;/a&gt;, &lt;a href="https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters"&gt;reified type parameters&lt;/a&gt; to avoid type erasure, &lt;a href="https://kotlinlang.org/docs/reference/data-classes.html#data-classes"&gt;data classes&lt;/a&gt; or immutability encouraged by default, but I think you should just &lt;a href="https://play.kotlinlang.org/byExample/overview"&gt;learn Kotlin by example&lt;/a&gt; eventually helped by the &lt;a href="https://kotlinlang.org/docs/reference/"&gt;reference documentation&lt;/a&gt; and make your own judgement. You can also follow this step by step &lt;a href="https://spring.io/guides/tutorials/spring-boot-kotlin/"&gt;Spring Boot tutorial with Kotlin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;So let&amp;#8217;s say I will choose Kotlin for my next Spring Boot project ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="annotated-code-controller-code-or-functional-style"&gt;&lt;a class="anchor" href="#annotated-code-controller-code-or-functional-style"&gt;&lt;/a&gt;Annotated &lt;code&gt;@Controller&lt;/code&gt; or functional style?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As I said in the introduction, choices depend of the context and are a matter of taste. I am a big fan of &lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/languages.html#kotlin-web"&gt;functional routing with Kotlin&lt;/a&gt; given the very nice DSL and functional programming capabilities of this language. I am even working on exploring how we could define Spring Boot application configuration in a functional way via the experimental &lt;a href="https://spring.io/blog/2018/10/02/the-evolution-of-spring-fu"&gt;Kofu DSL for Spring Boot&lt;/a&gt; which is incubating in &lt;a href="https://github.com/spring-projects/spring-fu"&gt;Spring Fu&lt;/a&gt; repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;But today, let&amp;#8217;s say my team is composed of developers used to &lt;code&gt;@Controller&lt;/code&gt; programming model for years, and that I don&amp;#8217;t want to change everything at the same time, so let&amp;#8217;s keep &lt;code&gt;@Controller&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="spring-mvc-or-webflux"&gt;&lt;a class="anchor" href="#spring-mvc-or-webflux"&gt;&lt;/a&gt;Spring MVC or WebFlux?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The choice we propose in term of web framework is the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can continue to use Spring MVC and all the related well known technologies that we continue to improve: Tomcat, JPA, etc. You can even leverage some reactive bits by using &lt;code&gt;WebClient&lt;/code&gt; modern API instead of &lt;code&gt;RestTemplate&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;But we also provide a reactive stack that includes &lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/web-reactive.html#webflux"&gt;WebFlux&lt;/a&gt;, a web framework based on &lt;a href="http://www.reactive-streams.org/"&gt;Reactive Streams&lt;/a&gt; for those who want more scalability, a stack immune to latency (useful for microservices-oriented architecture) and better stream processing capabilities. Other parts of the ecosystem like Spring Data and Spring Security provide reactive support as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="webflux-with-reactor-api-in-java"&gt;&lt;a class="anchor" href="#webflux-with-reactor-api-in-java"&gt;&lt;/a&gt;WebFlux with Reactor API in Java&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Until now, using Spring reactive stack using WebFlux required a pretty big shift by switching IO related functionalities (web, persistence) from imperative to declarative/functional style by using APIs like Reactor &lt;a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html"&gt;Mono&lt;/a&gt; and &lt;a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html"&gt;Flux&lt;/a&gt; or RxJava similar types. This disruptive approach provides real advantages compared to imperative programming, but is also very different and requires a non trivial learning curve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Let&amp;#8217;s see what that means with concrete code, and let&amp;#8217;s use this opportunity to show you how one can use &lt;a href="https://r2dbc.io/"&gt;R2DBC&lt;/a&gt; (Reactive Streams based alternative to JDBC) and &lt;a href="https://spring.io/projects/spring-data-r2dbc"&gt;Spring Data R2DBC&lt;/a&gt; to access SQL databases in a reactive way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If we would have chosen Java, we would have written the following &lt;code&gt;UserRepository&lt;/code&gt; class that exposes a reactive API to access SQL databases using the &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.0.0.M1/api/org/springframework/data/r2dbc/function/DatabaseClient.html"&gt;&lt;code&gt;DatabaseClient&lt;/code&gt;&lt;/a&gt; API provided by Spring Data R2DBC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;class UserRepository {

	private final DatabaseClient client;

	public UserRepository(DatabaseClient client) {
		this.client = client;
	}

	public Mono&amp;lt;Long&amp;gt; count() {
		return client.execute().sql("SELECT COUNT(*) FROM users")
			.as(Long.class).fetch().one();
	}

	public Flux&amp;lt;User&amp;gt; findAll() {
		return client.select().from("users").as(User.class).fetch().all();
	}

	public Mono&amp;lt;User&amp;gt; findOne(String id) {
		return client.execute()
			.sql("SELECT * FROM users WHERE login = $1")
			.bind(0, id).as(User.class).fetch().one();
	}

	public Mono&amp;lt;Void&amp;gt; deleteAll() {
		return client.execute().sql("DELETE FROM users").fetch()
			.one().then();
	}

	public Mono&amp;lt;Void&amp;gt; save(User user) {
		return client.insert().into(User.class).table("users")
			.using(user).then();
	}

	public Mono&amp;lt;Void&amp;gt; init() {
		return client.execute().sql("CREATE TABLE ...").then()
			.then(deleteAll())
			.then(save(new User("smaldini", "St¨¦phane", "Maldini")))
			.then(save(new User("sdeleuze", "S¨¦bastien", "Deleuze")))
			.then(save(new User("bclozel", "Brian", "Clozel")));
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
Saving the users could have been done in a fork-join way because these operations do not depend on each other, but for the sake of this comparison I use sequential operations chained with &lt;code&gt;then()&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can see that in such API, &lt;code&gt;void&lt;/code&gt; becomes &lt;code&gt;Mono&amp;lt;Void&amp;gt;&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt; becomes &lt;code&gt;Mono&amp;lt;User&amp;gt;&lt;/code&gt;. This allows to use them in a non-blocking way and provide access to a rich set of operators. But it also makes it mandatory to use &lt;code&gt;Mono&lt;/code&gt; wrapper and significantly change how you use these API. For example if some operations need to be done sequentially like in the &lt;code&gt;init()&lt;/code&gt; method which is straightforward with imperative code, here we have to build a declarative pipeline with the &lt;code&gt;then&lt;/code&gt; operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;code&gt;Flux&amp;lt;User&amp;gt;&lt;/code&gt; provides more added value since it allows to process the incoming users as a stream while usage of &lt;code&gt;List&amp;lt;User&amp;gt;&lt;/code&gt; as typically used in a blocking stack implies loading all the data in memory before processing it. Notice we could also have used &lt;code&gt;Mono&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;&lt;/code&gt; here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;On controller side, you can see that Spring WebFlux supports natively these reactive types, and you can also see another characteristic of Reactive Streams based API where exceptions are mostly used as an error signal carried by the reactive type instead of being thrown like in regular imperative code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@RestController
public class UserController {

	private final UserRepository userRepository;

	public UserController(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	@GetMapping("/")
	public Flux&amp;lt;User&amp;gt; findAll() {
		return userRepository.findAll();
	}

	@GetMapping("/{id}")
	public Mono&amp;lt;User&amp;gt; findOne(@PathVariable String id) {
		return userRepository
			.findOne(id)
			.switchIfEmpty(Mono.error(
				new CustomException("This user does not exist");
	}

	@PostMapping("/")
	public Mono&amp;lt;Void&amp;gt; save(User user) {
		return userRepository.save(user);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="webflux-with-coroutines-api-in-kotlin"&gt;&lt;a class="anchor" href="#webflux-with-coroutines-api-in-kotlin"&gt;&lt;/a&gt;WebFlux with coroutines API in Kotlin&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;It is important to understand that Spring reactive support has been built on top of &lt;a href="http://www.reactive-streams.org/"&gt;Reactive Streams&lt;/a&gt; with interoperability in mind, and that Reactor is used for 2 different purpose:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is the Reactive Streams implementation that we use everywhere in Spring reactive infrastructure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is also the default reactive public API exposed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;But Spring reactive support has been designed from its inception to adapt easily to other asynchronous or reactive APIs like &lt;code&gt;CompletableFuture&lt;/code&gt;, RxJava 2, &lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/languages.html#coroutines"&gt;and now coroutines&lt;/a&gt;. In that case we still leverage Reactor internally, adapting at public API level to a different end user reactive API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;It is of course perfectly fine to continue to use &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; in Kotlin if you prefer this approach, but Spring Framework 5.2 introduces a new major feature: we can now use &lt;a href="https://kotlinlang.org/docs/reference/coroutines-overview.html"&gt;Kotlin coroutines&lt;/a&gt; to leverage Spring reactive stack in a more imperative way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Coroutines are Kotlin lightweight threads allowing to write non-blocking code in an imperative way. On language side, suspending functions identified by the &lt;code&gt;suspend&lt;/code&gt; keyword provide an abstraction for asynchronous operations while on library side &lt;a href="https://github.com/Kotlin/kotlinx.coroutines"&gt;kotlinx.coroutines&lt;/a&gt; provides functions likes &lt;a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html"&gt;async { }&lt;/a&gt; and types like &lt;a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html"&gt;Flow&lt;/a&gt; which is &lt;code&gt;Flux&lt;/code&gt; equivalent in coroutines world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;So what look like &lt;code&gt;UserRepository&lt;/code&gt; and &lt;code&gt;UserController&lt;/code&gt; written in Kotlin instead of Java and using coroutines and &lt;code&gt;Flow&lt;/code&gt; instead or &lt;code&gt;Mono&lt;/code&gt; and &lt;code&gt;Flux&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;class UserRepository(private val client: DatabaseClient) {

	suspend fun count(): Long =
		client.execute().sql("SELECT COUNT(*) FROM users")
			.asType&amp;lt;Long&amp;gt;().fetch().awaitOne()

	fun findAll(): Flow&amp;lt;User&amp;gt; =
		client.select().from("users").asType&amp;lt;User&amp;gt;().fetch().flow()

	suspend fun findOne(id: String): User? =
		client.execute()
			.sql("SELECT * FROM users WHERE login = \$1")
			.bind(0, id).asType&amp;lt;User&amp;gt;()
			.fetch()
			.awaitOneOrNull()

	suspend fun deleteAll() =
		client.execute().sql("DELETE FROM users").await()

	suspend fun save(user: User) =
		client.insert().into&amp;lt;User&amp;gt;().table("users").using(user).await()

	suspend fun init() {
		client.execute().sql("CREATE TABLE IF NOT EXISTS users (login varchar PRIMARY KEY, firstname varchar, lastname varchar);").await()
		deleteAll()
		save(User("smaldini", "St¨¦phane", "Maldini"))
		save(User("sdeleuze", "S¨¦bastien", "Deleuze"))
		save(User("bclozel", "Brian", "Clozel"))
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can see here that instead of returning for example &lt;code&gt;Mono&amp;lt;User&amp;gt;&lt;/code&gt;, we return &lt;code&gt;User&lt;/code&gt; (or more exactly its nullable variant &lt;code&gt;User?&lt;/code&gt;) in a suspending function that can be used in an imperative way. The differences in &lt;code&gt;init()&lt;/code&gt; method implementation illustrate that pretty well since we now use regular imperative code instead of chained &lt;code&gt;then&lt;/code&gt; invocations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;But wait, how can I use coroutines directly on the &lt;code&gt;DatabaseClient&lt;/code&gt; type which is a reactive API based on &lt;code&gt;Mono&lt;/code&gt; and &lt;code&gt;Flux&lt;/code&gt;? This is made possible because Spring Data R2DBC also provides Kotlin extensions (see for example &lt;a href="https://github.com/spring-projects/spring-data-r2dbc/blob/master/src/main/kotlin/org/springframework/data/r2dbc/function/RowsFetchSpecExtensions.kt"&gt;this one&lt;/a&gt;) which allows you to add coroutines based methods on &lt;code&gt;DatabaseClient&lt;/code&gt; once imported. By convention, suspending methods are prefixed by &lt;code&gt;await&lt;/code&gt; or suffixed by &lt;code&gt;AndAwait&lt;/code&gt; and get a similar name to their &lt;code&gt;Mono&lt;/code&gt; based counterparts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now let&amp;#8217;s have a deeper look to this &lt;code&gt;Flow&amp;lt;User&amp;gt;&lt;/code&gt; return type. First, be aware that we are referring to &lt;a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html"&gt;&lt;code&gt;kotlinx.coroutines.flow.Flow&lt;/code&gt;&lt;/a&gt;, not &lt;a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html"&gt;&lt;code&gt;java.util.concurrent.Flow&lt;/code&gt;&lt;/a&gt; which is Reactive Streams container type provided with Java 9+.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You will use &lt;code&gt;Flow&lt;/code&gt; API like you use Java 8+ &lt;code&gt;Stream&lt;/code&gt; or its Kotlin equivalent &lt;code&gt;Sequence&lt;/code&gt;, but the huge difference is that it is suitable for asynchronous operations and manages backpressure. So it is &lt;code&gt;Flux&lt;/code&gt; equivalent in coroutines world, suitable for hot or cold stream, finite or infinite streams, with the following main differences:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Flow&lt;/code&gt; is push-based while &lt;code&gt;Flux&lt;/code&gt; is push-pull hybrid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backpressure is implemented via suspending functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Flow&lt;/code&gt; has only a &lt;a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/collect.html"&gt;single suspending &lt;code&gt;collect&lt;/code&gt; method&lt;/a&gt; and operators are implemented as &lt;a href="https://kotlinlang.org/docs/reference/extensions.html"&gt;extensions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-core/common/src/flow/operators"&gt;Operators are easy to implement&lt;/a&gt; thanks to coroutines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extensions allow to add custom operators to &lt;code&gt;Flow&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collect operations are suspending functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html"&gt;&lt;code&gt;map&lt;/code&gt; operator&lt;/a&gt; supports asynchronous operation (no need for &lt;code&gt;flatMap&lt;/code&gt;) since it takes a suspending function parameter&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now let&amp;#8217;s have a look to the coroutines version of the controller:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;@RestController
class UserController(private val userRepository: UserRepository) {

	@GetMapping("/")
	fun findAll(): Flow&amp;lt;User&amp;gt; =
		userRepository.findAll()

	@GetMapping("/{id}")
	suspend fun findOne(@PathVariable id: String): User? =
		userRepository.findOne(id) ?:
			throw CustomException("This user does not exist")

	@PostMapping("/")
	suspend fun save(user: User) =
		userRepository.save(user)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Again you can see that the code is very close of regular imperative code that we would have used with Spring MVC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In addition to providing coroutines extensions to &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; based APIs like &lt;code&gt;WebClient&lt;/code&gt;, &lt;code&gt;ServerRequest&lt;/code&gt; or &lt;code&gt;ServerResponse&lt;/code&gt;, Spring WebFlux now supports natively suspending functions and &lt;code&gt;Flow&lt;/code&gt; return types for annotated &lt;code&gt;@Controller&lt;/code&gt; classes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="asynchronous-operations-with-imperative-code"&gt;&lt;a class="anchor" href="#asynchronous-operations-with-imperative-code"&gt;&lt;/a&gt;Asynchronous operations with imperative code&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Let&amp;#8217;s leverage &lt;code&gt;WebClient&lt;/code&gt; coroutines extensions to see how we can chain asynchronous calls. We are going to request a remote HTTP endpoint to get additional &lt;code&gt;UserDetail1&lt;/code&gt; and &lt;code&gt;UserDetail2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;@RestController
class UserWithDetailsController(
		private val userRepository: UserRepository,
		private val client: WebClient) {

	@GetMapping("/")
	fun findAll(): Flow&amp;lt;UserWithDetails&amp;gt; =
		userRepository.findAll().map(this::withDetails)

	@GetMapping("/{id}")
	suspend fun findOne(@PathVariable id: String): UserWithDetails {
		val user: User = userRepository.findOne(id) ?:
			throw CustomException("This user does not exist")
		return withDetails(user)
	}

	private suspend fun withDetails(user: User): UserWithDetails {
		val userDetail1 = client.get().uri("/userdetail1/${user.login}")
			.accept(APPLICATION_JSON)
			.awaitExchange().awaitBody&amp;lt;UserDetail1&amp;gt;()
		val userDetail2 = client.get().uri("/userdetail2/${user.login}")
			.accept(APPLICATION_JSON)
			.awaitExchange().awaitBody&amp;lt;UserDetail2&amp;gt;()
		return UserWithDetails(user, userDetail1, userDetail2)
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here we are using &lt;code&gt;WebClient&lt;/code&gt; coroutines extensions like &lt;code&gt;awaitExchange()&lt;/code&gt; and &lt;code&gt;awaitBody()&lt;/code&gt; to perform asynchronous and non-blocking operations in a purely imperative way. And since &lt;code&gt;Flow&lt;/code&gt; &lt;a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html"&gt;&lt;code&gt;map&lt;/code&gt; operator&lt;/a&gt; takes a suspending function parameter, we can perform such operation in it, no need for &lt;code&gt;flatMap&lt;/code&gt; here like we would done it with reactive APIs in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="parallel-decomposition"&gt;&lt;a class="anchor" href="#parallel-decomposition"&gt;&lt;/a&gt;Parallel decomposition&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As seen previously, coroutines are sequential by default, but they can also be used to perform operations in parallel. Let&amp;#8217;s refactor our previous example to perform the 2 remote calls concurrently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-kotlin" data-lang="kotlin"&gt;@RestController
class UserWithDetailsController(
		private val userRepository: UserRepository,
		private val client: WebClient) {

	@GetMapping("/")
	fun findAll(): Flow&amp;lt;UserWithDetails&amp;gt; =
		userRepository.findAll().map(this::withDetails)

	@GetMapping("/{id}")
	suspend fun findOne(@PathVariable id: String): UserWithDetails {
		val user: User = userRepository.findOne(id) ?:
			throw CustomException("This user does not exist")
		return withDetails(user)
	}

	private suspend fun withDetails(user: User): UserWithDetails = coroutineScope {
		val asyncDetail1 = async {
			client.get().uri("/userdetail1/${user.login}")
				.accept(APPLICATION_JSON)
				.awaitExchange().awaitBody&amp;lt;UserDetail1&amp;gt;()
		}
		val asyncDetail2 = async {
			client.get().uri("/userdetail2/${user.login}")
				.accept(APPLICATION_JSON)
				.awaitExchange().awaitBody&amp;lt;UserDetail2&amp;gt;()
		}
		UserWithDetails(user, asyncDetail1.await(), asyncDetail2.await())
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here we leverage &lt;a href="https://medium.com/@elizarov/structured-concurrency-722d765aa952"&gt;structured concurrency&lt;/a&gt; to trigger parallel retrieval of the 2 user details by creating &lt;code&gt;Deferred&amp;lt;UserDetail1&amp;gt;&lt;/code&gt; and &lt;code&gt;Deferred&amp;lt;UserDetail2&amp;gt;&lt;/code&gt; instances via the &lt;code&gt;async {}&lt;/code&gt; builder, then we wait completion of these by calling the 2 &lt;code&gt;await()&lt;/code&gt; methods that will return the &lt;code&gt;UserDetail1&lt;/code&gt; and &lt;code&gt;UserDetail2&lt;/code&gt; instances when available.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="conclusion"&gt;&lt;a class="anchor" href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I think using Spring reactive stack with such coroutines and Kotlin &lt;code&gt;Flow&lt;/code&gt; APIs provides an interesting trade-of between imperative and declarative approaches. It allows to leverage WebFlux and Spring Data reactive scalability and features in a very approachable way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Coroutines support in Spring WebFlux and Spring Data will be available as part of the upcoming Spring Boot 2.2 release. You can read the &lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/languages.html#coroutines"&gt;reference documentation&lt;/a&gt; and can expect further improvements like coroutines support for &lt;a href="http://rsocket.io/"&gt;RSocket&lt;/a&gt; &lt;code&gt;@MessageMapping&lt;/code&gt; endpoints and &lt;code&gt;RSocketRequester&lt;/code&gt; extensions. Spring Data Moore will also provide similar coroutines extensions on Spring Data MongoDB, Cassandra and Redis. And Spring Data may provide support for &lt;a href="https://jira.spring.io/browse/DATACMNS-1508"&gt;coroutines repositories&lt;/a&gt; at some point. We are also going to make &lt;a href="https://github.com/Kotlin/kotlinx.coroutines/issues/284"&gt;Reactor and coroutines context interoperable&lt;/a&gt; to support security and reactive transactions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I would like to finish by saying thank you to many talented engineers without whom all of this would not have been possible:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Roman Elizarov and Vsevolod Tolstopyatov from Kotlin team for their incredible work on coroutines and &lt;code&gt;Flow&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Konrad Kaminski for the initial community driven coroutines support for Spring&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jake Wharton for its early prototyping around unifying Rx and coroutines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;St¨¦phane Maldini and David Karnok for their inspirational work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Juergen Hoeller, Rossen Stoyanchev and Brian Dussault for their confidence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark Paluch and Oliver Drotbohm for their support on the persistence side&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As usual, I am looking forward for feedback, &lt;a href="https://github.com/Kotlin/kotlinx.coroutines/issues/254"&gt;as well as Kotlin team on &lt;code&gt;Flow&lt;/code&gt; API&lt;/a&gt; since it is still in preview mode. Come to see my upcoming talks at &lt;a href="https://cfp.devoxx.fr/2019/talk/CWE-1971/Spring_Boot_avec_Kotlin,_Kofu_et_les_Coroutines"&gt;Devoxx France&lt;/a&gt;, &lt;a href="https://jax.de/serverside-enterprise-java/spring-boot-with-kotlin-functional-configuration-and-graalvm/"&gt;JAX&lt;/a&gt;, &lt;a href="https://2019.springio.net/sessions/spring-boot-with-kofu-dsl-and-coroutines"&gt;Spring I/O&lt;/a&gt; or &lt;a href="https://sunny-tech.io/schedule/2019-06-28?sessionId=31"&gt;Sunny Tech&lt;/a&gt; to know more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Rabobank's Roy Braam on Building an Agile Bank</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/11/a-bootiful-podcast-rabobank-s-roy-braam-on-building-an-agile-bank" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-04-11:3638</id>
    <updated>2019-04-11T23:39:15Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! In this installment Josh Long talks to Roy Braam a solution&amp;rsquo;s architect at Rabobank, a bank in the Netherlands, about how they are able to quickly iterate despite regulation and size.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/rbraam"&gt;Roy Braam on Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.rabobank.com/en/home/index.html"&gt;Rabobank&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/starbuxman"&gt;Josh Long on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/604685703&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Moore M3 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/11/spring-data-moore-m3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Christoph Strobl</name>
    </author>
    <id>tag:spring.io,2019-04-10:3636</id>
    <updated>2019-04-11T11:53:33Z</updated>
    <content type="html">&lt;p&gt;Hot on the heels of &lt;a href="https://spring.io/blog/2019/04/10/spring-framework-5-2-0-m1-available-now"&gt;Spring Framework 5.2 M1&lt;/a&gt; and just in time for the upcoming &lt;a href="https://github.com/spring-projects/spring-boot/milestone/134"&gt;Spring Boot 2.2 M2&lt;/a&gt; release, on behalf of the Spring Data team, I¡¯m pleased to announce the availability of the third milestone of the &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Moore"&gt;Moore&lt;/a&gt; release train.&lt;/p&gt;
&lt;p&gt;Notable changes amongst many others:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Flow&lt;/code&gt; extensions for Kotlin coroutines in Spring Data for Apache Cassandra &amp;amp; MongoDB.&lt;/li&gt;
  &lt;li&gt;MongoDB &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.0.M3/reference/html/#mongo.jsonSchema.generated"&gt;Json Schema generation&lt;/a&gt; from domain Types.&lt;/li&gt;
  &lt;li&gt;Support for &lt;code&gt;BINARY&lt;/code&gt; storage type in Spring Data JDBC.&lt;/li&gt;
  &lt;li&gt;Alternative &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.0.M3/reference/html/#elasticsearch.mapping.meta-model"&gt;EntityMapper&lt;/a&gt; for Elasticsearch.&lt;/li&gt;
  &lt;li&gt;Improved Geospatial query support for Neo4j.&lt;/li&gt;
  &lt;li&gt;Smarter Redis cluster topology caching.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please find a high-level overview of what has been added in our &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Moore"&gt;release wiki&lt;/a&gt;.&lt;br/&gt;As always, we¡¯re looking forward to your feedback! -&amp;gt; &lt;a href="https://twitter.com/springdata"&gt;@SpringData&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.1 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jdbc/1.1.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.1 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-solr/4.1.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-gemfire/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/5.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-geode/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-ldap/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/3.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/2.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/3.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.2 M3 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/3.2.0.M3"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.0.M3/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.0.M3/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.0.M3/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration SMB 1.1 GA Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/10/spring-integration-smb-1-1-ga-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2019-04-10:3637</id>
    <updated>2019-04-10T20:14:17Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of Spring Integration team I am pleased to announce that the &lt;code&gt;1.1.0.RELEASE&lt;/code&gt; for the Spring Integration Extension for SMB  is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;It can be downloaded from Maven Central, JCenter, and our &lt;a href="https://repo.spring.io/release"&gt;release repository&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-groovy" data-lang="groovy"&gt;compile "org.springframework.integration:spring-integration-smb:1.1.0.RELEASE"&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;I would like to thank &lt;a href="https://github.com/GregBragg"&gt;Gregory Bragg&lt;/a&gt; for awesome contribution to this project in regards to update it to the latest client library version to support SMB v2 &amp;amp; 3!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can learn more about this extension on its GitHub &lt;a href="https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-smb"&gt;page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Any feedback, feature ideas, critics, bug reports and questions are welcome via appropriate communication channels:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-integration-extensions"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.adoc"&gt;Contributing&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-integration"&gt;Help&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-integration"&gt;Chat&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 5.2.0.M1 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/10/spring-framework-5-2-0-m1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Brian Clozel</name>
    </author>
    <id>tag:spring.io,2019-04-10:3635</id>
    <updated>2019-04-10T09:58:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone that contributed, I am pleased to announce that the first milestone of Spring Framework 5.2 has been released and is available from &lt;a href="http://repo.spring.io/milestone/"&gt;our milestone repository&lt;/a&gt;. This release closes over &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.2.0.M1"&gt;140 issues and pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This first milestone is packed with features and fixes, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Many core container improvements, from parsing annotation data with the new &lt;code&gt;MergedAnnotations&lt;/code&gt; API to &lt;code&gt;@Configuration&lt;/code&gt; class optimizations&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/languages.html#coroutines"&gt;Support for Kotlin coroutines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;New &lt;a href="https://spring.io/blog/2019/04/03/spring-tips-webmvc-fn-the-functional-dsl-for-spring-mvc"&gt;WebMvc.fn&lt;/a&gt; programming model in the &lt;code&gt;spring-webmvc&lt;/code&gt; module providing a functional alternative to annotated controllers that&amp;rsquo;s built on the Servlet API. Now &lt;code&gt;spring-webmvc&lt;/code&gt; like &lt;code&gt;spring-webflux&lt;/code&gt; offers both functional and annotation-based programming models.&lt;/li&gt;
  &lt;li&gt;Performance improvements in Spring MVC and Spring WebFlux to reduce overhead in request mapping, media type parsing, CORS checks, and more&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rsocket.io/"&gt;RSocket&lt;/a&gt; support including &lt;a href="https://github.com/spring-projects/spring-framework/blob/6d7bf8050fe710c5253e6032233021d5e025e1d5/spring-messaging/src/test/java/org/springframework/messaging/rsocket/RSocketClientToServerIntegrationTests.java#L200"&gt;response handling&lt;/a&gt; via annotated &lt;code&gt;@MessageMapping&lt;/code&gt; methods and &lt;a href="https://github.com/spring-projects/spring-framework/blob/6d7bf8050fe710c5253e6032233021d5e025e1d5/spring-messaging/src/test/java/org/springframework/messaging/rsocket/RSocketClientToServerIntegrationTests.java#L151"&gt;performing requests&lt;/a&gt; via &lt;code&gt;RSocketRequester&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Many interesting integration testing improvements, especially if you&amp;rsquo;re dealing with &lt;a href="https://docs.spring.io/spring/docs/5.2.0.M1/spring-framework-reference/testing.html#testcontext-test-execution-events"&gt;application and context events in tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A brand new look for our &lt;a href="https://docs.spring.io/spring-framework/docs/5.2.0.M1/spring-framework-reference/"&gt;reference documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please keep an eye on the &lt;a href="https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-Spring-Framework-5.x"&gt;What&amp;rsquo;s new in Spring Framework 5.x&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x"&gt;Upgrading to Spring Framework 5.x&lt;/a&gt; wiki pages, as we&amp;rsquo;ll keep adding information there during the milestone phase. If you&amp;rsquo;re wondering about our support policy, the &lt;a href="https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions"&gt;dedicated page should help you&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to try out the new Spring Framework features with your Spring Boot application, you&amp;rsquo;ll be able to use &lt;a href="https://github.com/spring-projects/spring-boot/milestone/134"&gt;Spring Boot 2.2.0.M2 as soon as it&amp;rsquo;s out&lt;/a&gt;. Of course, this will be available on &lt;a href="https://start.spring.io"&gt;https://start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://spring.io/projects/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/5.2.0.M1/spring-framework-reference/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring+or+spring-mvc+or+spring-aop+or+spring-jdbc+or+spring-transactions+or+spring-annotations+or+spring-jms+or+spring-el+or+spring-test+or+spring-java-config+or+spring-remoting+or+spring-orm+or+spring-jmx+or+spring-cache+or+spring-webflux"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Lovelace SR6, Kay SR14, Ingalls SR20 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/04/10/spring-data-lovelace-sr6-kay-sr14-ingalls-sr20-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Jens Schauder</name>
    </author>
    <id>tag:spring.io,2019-04-09:3632</id>
    <updated>2019-04-10T07:18:02Z</updated>
    <content type="html">&lt;p&gt;On behalf of the entire team I¡¯d like to announce the availability of three service releases for Spring Data release trains: Lovelace SR6, Kay SR14, and Ingalls SR20. &lt;/p&gt;
&lt;p&gt;The releases are recommended upgrades as they contain fixes for a &lt;a href="https://pivotal.io/security/cve-2019-3797"&gt;CVE in Spring Data JPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Spring Boot 2.1.4, 2.0.9, and 1.5.20 already pull in the above Spring Data versions, including the fixes that were released last week, and are now also available for use.&lt;/p&gt;
&lt;p&gt;Here¡¯s the content of the releases:&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-data-lovelace-sr6" class="anchor" name="spring-data-lovelace-sr6"&gt;&lt;/a&gt;Spring Data Lovelace SR6&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/1.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.0.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.0.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.1.6 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.1.6.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.6.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.6.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.6.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-data-kay-sr14" class="anchor" name="spring-data-kay-sr14"&gt;&lt;/a&gt;Spring Data Kay SR14&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 3.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/3.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/3.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/3.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/3.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.0.14 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.0.14.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.0.14.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.0.14.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.0.14.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-data-ingalls-sr20" class="anchor" name="spring-data-ingalls-sr20"&gt;&lt;/a&gt;Spring Data Ingalls SR20&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.13.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.13.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/1.13.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/1.13.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/1.13.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.11.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.11.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/1.11.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/1.11.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/1.11.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 2.1.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/2.1.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/2.1.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/2.1.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/2.1.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.10.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.10.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/1.10.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/1.10.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/1.10.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 1.2.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/1.2.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/1.2.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/1.2.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/1.2.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.9.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.9.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/1.9.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/1.9.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/1.9.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 4.2.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/4.2.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/4.2.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/4.2.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/4.2.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 1.5.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.5.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/1.5.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/1.5.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/1.5.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 1.0.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/1.0.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/1.0.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/1.0.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/1.0.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 1.1.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/1.1.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/1.1.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/1.1.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/1.1.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.6.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.6.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/2.6.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/2.6.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/2.6.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.8.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.8.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/1.8.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/1.8.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/1.8.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 2.1.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/2.1.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/2.1.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/2.1.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/2.1.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 2.2.20 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/2.2.20.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/2.2.20.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/2.2.20.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/2.2.20.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
</feed>
